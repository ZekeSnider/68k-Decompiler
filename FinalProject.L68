00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/7/2014 12:53:16 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Group 6 68k Decompiler
00000000                             3  * Written by :Zeke Snider and Joseph Sturtevan
00000000                             4  * Date       :12/4/2014
00000000                             5  * Description:Decompiler for CSS 422 Hardware
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  * Put program code here
00001000  4441                      10              NEG     D1              *Test NEG
00001002  D240                      11              ADD     D0,D1
00001004  4240                      12              CLR.W   D0              *Clears D0
00001006  4BF9 00001000             13              LEA     cur_address,A5  *Load start address
0000100C  4DF9 00001010             14              LEA     test_end,A6     *Load end address
00001012                            15          
00001012  3015                      16  loop        MOVE.W  (A5),D0         *Gets the data of where the pointer is at
00001014  41F9 0000A000             17              LEA     OUTPUT_START,A0 *Sets up output for EA
0000101A  6100 000C                 18              BSR     getOP           *Gets the data at add
0000101E  544D                      19              ADDQ.W  #byte,A5        *Incrementing the pointer one word
00001020  BACE                      20              CMPA.W  A6,A5           *Seeing if we're at end of the search area
00001022  6E00 10DA                 21              BGT     end_search      *go to end if we leave search area
00001026  60EA                      22              BRA     loop            *else go back to the beginning of the loop
00001028                            23              
00001028  3400                      24  getOP       MOVE.W  D0,D2           *Moves data to D2 to use
0000102A  6000 0086                 25              BRA     compare_NOP     *compares the NOP op code
0000102E  6000 02A4                 26  endNOP      BRA     compare_RTS     *Compares the RTS op code
00001032                            27  endRTS
00001032  6100 07DA                 28              BSR     maskMulDivL     *Masks to compare to MULS.L and DIVS.L
00001036  6000 01B8                 29              BRA     compare_MULSL   *Compares the MULS.L op code
0000103A  6000 01C0                 30  endMULSL    BRA     compare_DIVSL   *Compares the DIVS.L op code
0000103E                            31  endDIVSL
0000103E  6100 07C6                 32              BSR     mask15to6       *Masks to compare BCLR
00001042  6000 0240                 33              BRA     compare_BCLRI   *Compare to BCLR with an immidiate
00001046  6000 0280                 34  endBCLRI    BRA     compare_JSR     *Compare to JSR
0000104A                            35  endJSR
0000104A  6100 07B2                 36              BSR     mask15to7       *Masks to compare to MoveM
0000104E  6000 010C                 37              BRA     compare_MOVEM   *Compares to MoveM
00001052                            38  endMOVEM
00001052  6100 079A                 39              BSR     mask15to8       *Masks to the first byte
00001056  6000 0066                 40              BRA     compare_ORI     *Compares the ORI op codes
0000105A  6000 01E0                 41  endORI      BRA     compare_CMPI    *Compares the CMPI op code
0000105E  6000 023C                 42  endCMPI     BRA     compare_Bcc     *Compares the Bcc op codes
00001062  6000 027C                 43  endBcc      BRA     compare_NEG     *Compares the NEG op code
00001066                            44  endNEG
00001066  6100 077E                 45              BSR     compMask        *Masks D2 to make comparisons easier
0000106A  6000 0090                 46              BRA     compare_EOR     *Compares the EOR op codes
0000106E  6000 0058                 47  endEOR      BRA     compare_OR      *Compares the OR op codes
00001072  6000 00A4                 48  endOR       BRA     compare_ADD     *Compares the ADD op codes
00001076  6000 00F8                 49  endADD      BRA     compare_MOVEA   *Compares the MOVEA op codes
0000107A  6000 0124                 50  endMOVEA    BRA     compare_SUB     *Compares the SUB op codes
0000107E  6000 0154                 51  endSUB      BRA     compare_SUBQ    *Compares the SUBQ op codes
00001082  6000 0184                 52  endSUBQ     BRA     compare_MULSW   *Compares the MULS.W op code
00001086  6000 018C                 53  endMULSW    BRA     compare_DIVSW   *Compares the DIVS.W op code
0000108A  6000 0194                 54  endDIVSW    BRA     compare_CMP     *Compares the CMP op codes
0000108E  6000 0200                 55  endCMP      BRA     compare_BCLR    *Compares the BCLR without immidate op code
00001092  6000 0258                 56  endBCLR     BRA     compare_LEA     *Compares the LEA op code
00001096                            57  endLEA
00001096  6100 075E                 58              BSR     mask15to12      *Masks D2 to first 4 bits
0000109A  6000 00E8                 59              BRA     compare_MOVE    *Compares the MOVE op codes
0000109E  6000 01A8                 60  endMOVE     BRA     compare_shift   *Compares LSL,LSR, ASL, and ASR
000010A2                            61  endshift
000010A2                            62                                      *if we get here, the operation is unknown
000010A2  3400                      63              MOVE.W  D0,D2           *Restores D2 to default
000010A4  6100 0778                 64              BSR     outaddress      *Data unknown, just print the address
000010A8  6100 078C                 65              BSR     isData          *And then the data
000010AC  6100 103A                 66  endOP       BSR     IO_PRINT_OUTPUT *Prints EA output
000010B0  4E75                      67              RTS                     *Returns to caller
000010B2                            68  
000010B2                            69  *Comparison subroutines, broken up by Operation
000010B2                            70  compare_NOP
000010B2  B47C 4E71                 71              CMP.W   #nop_code,D2    *Compares to NOP
000010B6  6700 0240                 72              BEQ     isNOP           *Skips the return if it is NOP
000010BA  6000 FF72                 73              BRA     endNOP
000010BE                            74  
000010BE                            75  compare_ORI
000010BE  B47C 0000                 76              CMP.W   #ori_code,D2    *Compares to ORI
000010C2  6700 0272                 77              BEQ     isORI
000010C6  6092                      78              BRA     endORI
000010C8                            79              
000010C8                            80  compare_OR
000010C8  B47C 8000                 81              CMP.W   #orbDn_code,D2  *Compares to ORI.B -> Dn
000010CC  6700 0292                 82              BEQ     isOR
000010D0  B47C 8040                 83              CMP.W   #orwDn_code,D2  *Compares to ORI.W -> Dn
000010D4  6700 028A                 84              BEQ     isOR
000010D8  B47C 8080                 85              CMP.W   #orlDn_code,D2  *Compares to ORI.L -> Dn
000010DC  6700 0282                 86              BEQ     isOR
000010E0  B47C 8100                 87              CMP.W   #orbEA_code,D2  *Compares to ORI.B -> EA
000010E4  6700 027A                 88              BEQ     isOR
000010E8  B47C 8140                 89              CMP.W   #orwEA_code,D2  *Compares to ORI.W -> EA
000010EC  6700 0272                 90              BEQ     isOR
000010F0  B47C 8180                 91              CMP.W   #orlEA_code,D2  *Compares to ORI.L -> EA
000010F4  6700 026A                 92              BEQ     isOR
000010F8  6000 FF78                 93              BRA     endOR
000010FC                            94              
000010FC                            95  compare_EOR
000010FC  B47C B100                 96              CMP.W   #eorb_code,D2   *Compares to EOR.B
00001100  6700 020A                 97              BEQ     isEOR
00001104  B47C B140                 98              CMP.W   #eorw_code,D2   *Compares to EOR.W
00001108  6700 0202                 99              BEQ     isEOR
0000110C  B47C B180                100              CMP.W   #eorl_code,D2   *Compares to EOR.L
00001110  6700 01FA                101              BEQ     isEOR
00001114  6000 FF58                102              BRA     endEOR
00001118                           103              
00001118                           104  compare_ADD
00001118  B47C D000                105              CMP.W   #addbDn_code,D2 *Compares to ADD.B -> Dn
0000111C  6700 0268                106              BEQ     isADD
00001120  B47C D040                107              CMP.W   #addwDn_code,D2 *Compares to ADD.W -> Dn
00001124  6700 0260                108              BEQ     isADD
00001128  B47C D080                109              CMP.W   #addlDn_code,D2 *Compares to ADD.L -> Dn
0000112C  6700 0258                110              BEQ     isADD
00001130  B47C D100                111              CMP.W   #addbEA_code,D2 *Compares to ADD.B -> EA
00001134  6700 0250                112              BEQ     isADD
00001138  B47C D140                113              CMP.W   #addwEA_code,D2 *Compares to ADD.W -> EA
0000113C  6700 0248                114              BEQ     isADD
00001140  B47C D180                115              CMP.W   #addlEA_code,D2 *Compares to ADD.L -> EA
00001144  6700 0240                116              BEQ     isADD
00001148  B47C D0C0                117              CMP.W   #addaw_code,D2  *Compares to ADDA.W
0000114C  6700 025E                118              BEQ     isADDA
00001150  B47C D1C0                119              CMP.W   #addal_code,D2  *Compares to ADDA.L
00001154  6700 0256                120              BEQ     isADDA
00001158  6000 FF1C                121              BRA     endADD
0000115C                           122  
0000115C                           123  compare_MOVEM
0000115C  B47C 4880                124              CMP.W   #movemr2m_code,D2 *Compares to MOVEM Register to memory
00001160  6700 0278                125              BEQ     isMOVEM
00001164  B47C 4C80                126              CMP.W   #movemm2r_code,D2 *Compares to MOVEM memory to register
00001168  6700 0270                127              BEQ     isMOVEM
0000116C  6000 FEE4                128              BRA     endMOVEM
00001170                           129  
00001170                           130  compare_MOVEA
00001170  B47C 3040                131              CMP.W   #moveaw_code,D2 *Compares to MOVEA word operation
00001174  6700 0278                132              BEQ     isMOVEA
00001178  B47C 2040                133              CMP.W   #moveal_code,D2 *Compares to MOVEA long operation
0000117C  6700 0270                134              BEQ     isMOVEA
00001180  6000 FEF8                135              BRA     endMOVEA
00001184                           136  
00001184                           137  compare_MOVE
00001184  B47C 1000                138              CMP.W   #moveb_code,D2  *Compares to MOVE byte operation
00001188  6700 0296                139              BEQ     isMOVE
0000118C  B47C 3000                140              CMP.W   #movew_code,D2  *Compares to MOVE word operation
00001190  6700 028E                141              BEQ     isMOVE
00001194  B47C 2000                142              CMP.W   #movel_code,D2  *Compares to MOVE long operation
00001198  6700 0286                143              BEQ     isMOVE
0000119C  6000 FF00                144              BRA     endMOVE
000011A0                           145  
000011A0                           146  compare_SUB
000011A0  B47C 9000                147              CMP.W   #subbDn_code,D2 *Compares to SUB.B -> Dn
000011A4  6700 02A8                148              BEQ     isSUB
000011A8  B47C 9040                149              CMP.W   #subwDn_code,D2 *Compares to SUB.W -> Dn
000011AC  6700 02A0                150              BEQ     isSUB
000011B0  B47C 9080                151              CMP.W   #sublDn_code,D2 *Compares to SUB.L -> Dn
000011B4  6700 0298                152              BEQ     isSUB
000011B8  B47C 9100                153              CMP.W   #subbEA_code,D2 *Compares to SUB.B -> EA
000011BC  6700 0290                154              BEQ     isSUB
000011C0  B47C 9140                155              CMP.W   #subwEA_code,D2 *Compares to SUB.W -> EA
000011C4  6700 0288                156              BEQ     isSUB
000011C8  B47C 9180                157              CMP.W   #sublEA_code,D2 *Compares to SUB.L -> EA
000011CC  6700 0280                158              BEQ     isSUB
000011D0  6000 FEAC                159              BRA     endSUB
000011D4                           160  
000011D4                           161  compare_SUBQ
000011D4  B47C 5100                162              CMP.W   #subqb_code,D2   *Compares to SUBQ.B
000011D8  6700 029E                163              BEQ     isSUBQ
000011DC  B47C 5140                164              CMP.W   #subqw_code,D2   *Compares to SUBQ.W
000011E0  6700 0296                165              BEQ     isSUBQ
000011E4  B47C 5180                166              CMP.W   #subql_code,D2   *Compares to SUBQ.L
000011E8  6700 028E                167              BEQ     isSUBQ
000011EC  6000 FE94                168              BRA     endSUBQ
000011F0                           169  
000011F0                           170  compare_MULSL
000011F0  B47C 0800                171              CMP.W   #mulsl_code,D2  *Compares to MULS.L
000011F4  6700 02B0                172              BEQ     isMULS
000011F8  6000 FE40                173              BRA     endMULSL
000011FC                           174  
000011FC                           175  compare_DIVSL
000011FC  B47C 0840                176              CMP.W   #divsl_code,D2  *Compares to DIVS.L
00001200  6700 02C4                177              BEQ     isDIVS
00001204  6000 FE38                178              BRA     endDIVSL
00001208                           179   
00001208                           180  compare_MULSW
00001208  B47C C1C0                181              CMP.W   #mulsw_code,D2  *Compares to MULS.W
0000120C  6700 0298                182              BEQ     isMULS
00001210  6000 FE74                183              BRA     endMULSW
00001214                           184  
00001214                           185  compare_DIVSW
00001214  B47C 81C0                186              CMP.W   #divsw_code,D2  *Compares to DIVS.W
00001218  6700 02AC                187              BEQ     isDIVS
0000121C  6000 FE6C                188              BRA     endDIVSW
00001220                           189  
00001220                           190  compare_CMP
00001220  B47C B000                191              CMP.W   #cmpb_code,D2   *Compares to CMP.B
00001224  6700 02C0                192              BEQ     isCMP
00001228  B47C B040                193              CMP.W   #cmpw_code,D2   *Compares to CMP.W
0000122C  6700 02B8                194              BEQ     isCMP
00001230  B47C B080                195              CMP.W   #cmpl_code,D2   *Compares to CMP.L
00001234  6700 02B0                196              BEQ     isCMP
00001238  6000 FE54                197              BRA     endCMP
0000123C                           198  
0000123C                           199  compare_CMPI
0000123C  B47C 0C00                200              CMP.W   #cmpi_code,D2   *Compares to CMPI
00001240  6700 02CE                201              BEQ     isCMPI
00001244  6000 FE18                202              BRA     endCMPI
00001248                           203  
00001248                           204  compare_shift
00001248  6100 05CC                205              BSR     maskShift        *Masks to shift type and direction
0000124C  B47C E008                206              CMP.W   #lsr_code,D2    *Compares to LSR
00001250  6700 02EC                207              BEQ     isLSR
00001254  B47C E108                208              CMP.W   #lsl_code,D2    *Compares to LSL
00001258  6700 030A                209              BEQ     isLSL
0000125C  B47C E000                210              CMP.W   #asr_code,D2    *Compares to ASR
00001260  6700 031E                211              BEQ     isASR
00001264  B47C E100                212              CMP.W   #asl_code,D2    *Compares to ASL
00001268  6700 0332                213              BEQ     isASL
0000126C  B47C E018                214              CMP.W   #ror_code,D2    *Compares to ROR
00001270  6700 0346                215              BEQ     isROR
00001274  B47C E118                216              CMP.W   #rol_code,D2    *Compares to ROL
00001278  6700 035A                217              BEQ     isROL
0000127C  6100 0578                218              BSR     mask15to12      *Returns the 15to12 mask
00001280  6000 FE20                219              BRA     endshift
00001284                           220  
00001284                           221  compare_BCLRI
00001284  B47C 0880                222              CMP.W   #bclri_code,D2  *Compares to BCLR with an immidiate
00001288  6700 0366                223              BEQ     isBCLR
0000128C  6000 FDB8                224              BRA     endBCLRI
00001290                           225  
00001290                           226  compare_BCLR
00001290  B47C 0180                227              CMP.W   #bclr_code,D2   *Compares to BCLR
00001294  6700 035A                228              BEQ     isBCLR
00001298  6000 FDF8                229              BRA     endBCLR
0000129C                           230  
0000129C                           231  compare_Bcc
0000129C  B47C 6500                232              CMP.W   #bcs_code,D2    *Compares to BCS
000012A0  6700 036A                233              BEQ     isBCS
000012A4  B47C 6C00                234              CMP.W   #bge_code,D2    *Compares to BGE
000012A8  6700 037A                235              BEQ     isBGE
000012AC  B47C 6D00                236              CMP.W   #blt_code,D2    *Compares to BLT
000012B0  6700 038A                237              BEQ     isBLT
000012B4  B47C 6800                238              CMP.W   #bvc_code,D2    *Compares to BVC
000012B8  6700 039A                239              BEQ     isBVC
000012BC  B47C 6000                240              CMP.W   #bra_code,D2    *Compares to BRA
000012C0  6700 03AA                241              BEQ     isBRA
000012C4  6000 FD9C                242              BRA     endBcc
000012C8                           243  
000012C8                           244  compare_JSR
000012C8  B47C 4E80                245              CMP.W   #jsr_code,D2    *Compares to JSR
000012CC  6700 03B6                246              BEQ     isJSR
000012D0  6000 FD78                247              BRA     endJSR
000012D4                           248  
000012D4                           249  compare_RTS
000012D4  B47C 4E75                250              CMP.W   #rts_code,D2    *Compares to RTS
000012D8  6700 03C2                251              BEQ     isRTS
000012DC  6000 FD54                252              BRA     endRTS
000012E0                           253  
000012E0                           254  compare_NEG
000012E0  B47C 4400                255              CMP.W   #neg_code,D2    *Compares to NEG
000012E4  6700 03CE                256              BEQ     isNEG
000012E8  6000 FD7C                257              BRA     endNEG
000012EC                           258  
000012EC                           259  compare_LEA
000012EC  B47C 41C0                260              CMP.W   #lea_code,D2    *Compares to LEA
000012F0  6700 03DA                261              BEQ     isLEA
000012F4  6000 FDA0                262              BRA     endLEA
000012F8                           263  
000012F8                           264  *If compare is successful, we go to one of the isX
000012F8  6100 0524                265  isNOP       BSR     outaddress      *prints current address
000012FC  43F9 0000210C            266              LEA     NOPstring,A1    *Loads NOPstring for printing
00001302  103C 000D                267              MOVE.B  #13,D0          *Sets up trap
00001306  4E4F                     268              TRAP    #15
00001308  6000 FDA2                269              BRA     endOP            
0000130C  6100 0510                270  isEOR       BSR     outaddress      *prints current address
00001310  6100 0EA2                271              BSR     BitMask6to8     *Masking size bits
00001314  1607                     272              MOVE.B  D7,D3           *Moving result to D3
00001316  10FC 0045                273              MOVE.B  #'E',(A0)+
0000131A  10FC 004F                274              MOVE.B  #'O',(A0)+
0000131E  10FC 0052                275              MOVE.B  #'R',(A0)+
00001322  10FC 002E                276              MOVE.B  #'.',(A0)+
00001326  6100 03B8                277              BSR     checkSize       *Finding size, outputting it, and storing it
0000132A  10FC 0020                278              MOVE.B  #' ',(A0)+
0000132E  6100 068A                279              BSR     EA_EOR
00001332  6000 FD78                280              BRA     endOP            
00001336  6100 04E6                281  isORI       BSR     outaddress      *prints current address
0000133A  6100 0E86                282              BSR     BitMask6to7     *Masking size bits
0000133E  1607                     283              MOVE.B  D7,D3           *Moving result to D3
00001340  10FC 004F                284              MOVE.B  #'O',(A0)+
00001344  10FC 0052                285              MOVE.B  #'R',(A0)+
00001348  10FC 0049                286              MOVE.B  #'I',(A0)+
0000134C  10FC 002E                287              MOVE.B  #'.',(A0)+
00001350  6100 038E                288              BSR     checkSize       *Finding size, outputting it, and storing it
00001354  10FC 0020                289              MOVE.B  #' ',(A0)+
00001358  6100 0728                290              BSR     EA_ORI
0000135C  6000 FD4E                291              BRA     endOP
00001360  6100 04BC                292  isOR        BSR     outaddress      *prints current address
00001364  6100 0E4E                293              BSR     BitMask6to8     *Masking size bits
00001368  1607                     294              MOVE.B  D7,D3           *Moving result to D3
0000136A  10FC 004F                295              MOVE.B  #'O',(A0)+
0000136E  10FC 0052                296              MOVE.B  #'R',(A0)+
00001372  10FC 002E                297              MOVE.B  #'.',(A0)+
00001376  6100 0368                298              BSR     checkSize       *Finding size, outputting it, and storing it
0000137A  10FC 0020                299              MOVE.B  #' ',(A0)+
0000137E  6100 068C                300              BSR     EA_OR
00001382  6000 FD28                301              BRA     endOP
00001386                           302  isADD       *BSR     outaddress      *prints current address
00001386  6100 0E2C                303              BSR     BitMask6to8     *Masking size bits
0000138A  1607                     304              MOVE.B  D7,D3           *Moving result to D3
0000138C  10FC 0041                305              MOVE.B  #'A',(A0)+
00001390  10FC 0044                306              MOVE.B  #'D',(A0)+
00001394  10FC 0044                307              MOVE.B  #'D',(A0)+
00001398  10FC 002E                308              MOVE.B  #'.',(A0)+
0000139C  6100 0342                309              BSR     checkSize       *Finding size, outputting it, and storing it
000013A0  10FC 0020                310              MOVE.B  #' ',(A0)+
000013A4  6100 0836                311              BSR     EA_ADD
000013A8  6000 FD02                312              BRA     endOP
000013AC  6100 0470                313  isADDA      BSR     outaddress      *prints current address
000013B0  6100 0E02                314              BSR     BitMask6to8     *Masking size bits
000013B4  3607                     315              MOVE.W  D7,D3           *Moving result to D3
000013B6  10FC 0041                316              MOVE.B  #'A',(A0)+
000013BA  10FC 0044                317              MOVE.B  #'D',(A0)+
000013BE  10FC 0044                318              MOVE.B  #'D',(A0)+
000013C2  10FC 0041                319              MOVE.B  #'A',(A0)+
000013C6  10FC 002E                320              MOVE.B  #'.',(A0)+
000013CA  6100 0314                321              BSR     checkSize       *Finding size, outputting it, and storing it
000013CE  10FC 0020                322              MOVE.B  #' ',(A0)+
000013D2  6100 0614                323              BSR     EA_ADDA
000013D6  6000 FCD4                324              BRA     endOP
000013DA  6100 0442                325  isMOVEM     BSR     outaddress      *prints current address
000013DE  43F9 00002124            326              LEA     MOVEMstring,A1  *Loads MOVEMstring for printing
000013E4  103C 000D                327              MOVE.B  #13,D0          *Sets up trap
000013E8  4E4F                     328              TRAP    #15
000013EA  6000 FCC0                329              BRA     endOP
000013EE  6100 042E                330  isMOVEA     BSR     outaddress      *prints current address
000013F2  6100 0E02                331              BSR     BitMask12to13   *Masking size bits
000013F6  3607                     332              MOVE.W  D7,D3           *Moving result to D3
000013F8  10FC 004D                333              MOVE.B  #'M',(A0)+
000013FC  10FC 004F                334              MOVE.B  #'O',(A0)+
00001400  10FC 0056                335              MOVE.B  #'V',(A0)+
00001404  10FC 0045                336              MOVE.B  #'E',(A0)+
00001408  10FC 0041                337              MOVE.B  #'A',(A0)+
0000140C  10FC 002E                338              MOVE.B  #'.',(A0)+
00001410  6100 02CE                339              BSR     checkSize       *Finding size, outputting it, and storing it
00001414  10FC 0020                340              MOVE.B  #' ',(A0)+
00001418  6100 088C                341              BSR     EA_MOVEA
0000141C  6000 FC8E                342              BRA     endOP
00001420  6100 03FC                343  isMOVE      BSR     outaddress      *prints current address
00001424  6100 0DD0                344              BSR     BitMask12to13   *Masking size bits
00001428  3607                     345              MOVE.W  D7,D3           *Moving result to D3
0000142A  10FC 004D                346              MOVE.B  #'M',(A0)+
0000142E  10FC 004F                347              MOVE.B  #'O',(A0)+
00001432  10FC 0056                348              MOVE.B  #'V',(A0)+
00001436  10FC 0045                349              MOVE.B  #'E',(A0)+
0000143A  10FC 002E                350              MOVE.B  #'.',(A0)+
0000143E  6100 02A0                351              BSR     checkSize       *Finding size, outputting it, and storing it
00001442  10FC 0020                352              MOVE.B  #' ',(A0)+
00001446  6100 082C                353              BSR     EA_MOVE
0000144A  6000 FC60                354              BRA     endOP
0000144E  6100 03CE                355  isSUB       BSR     outaddress      *prints current address
00001452  6100 0D60                356              BSR     BitMask6to8     *Masking size bits
00001456  1607                     357              MOVE.B  D7,D3           *Moving result to D3
00001458  10FC 0053                358              MOVE.B  #'S',(A0)+
0000145C  10FC 0055                359              MOVE.B  #'U',(A0)+
00001460  10FC 0042                360              MOVE.B  #'B',(A0)+
00001464  10FC 002E                361              MOVE.B  #'.',(A0)+
00001468  6100 0276                362              BSR     checkSize       *Finding size, outputting it, and storing it
0000146C  10FC 0020                363              MOVE.B  #' ',(A0)+
00001470  6100 06EC                364              BSR     EA_SUB
00001474  6000 FC36                365              BRA     endOP
00001478  6100 03A4                366  isSUBQ      BSR     outaddress      *prints current address
0000147C  6100 0D44                367              BSR     BitMask6to7     *Masking size bits
00001480  1607                     368              MOVE.B  D7,D3           *Moving result to D3
00001482  10FC 0053                369              MOVE.B  #'S',(A0)+
00001486  10FC 0055                370              MOVE.B  #'U',(A0)+
0000148A  10FC 0042                371              MOVE.B  #'B',(A0)+
0000148E  10FC 0051                372              MOVE.B  #'Q',(A0)+
00001492  10FC 002E                373              MOVE.B  #'.',(A0)+
00001496  6100 0248                374              BSR     checkSize       *Finding size, outputting it, and storing it
0000149A  10FC 0020                375              MOVE.B  #' ',(A0)+
0000149E  6100 07A4                376              BSR     EA_SUBQ
000014A2  6000 FC08                377              BRA     endOP
000014A6  6100 0376                378  isMULS      BSR     outaddress      *prints current address
000014AA  10FC 004D                379              MOVE.B  #'M',(A0)+
000014AE  10FC 0055                380              MOVE.B  #'U',(A0)+
000014B2  10FC 004C                381              MOVE.B  #'L',(A0)+
000014B6  10FC 0053                382              MOVE.B  #'S',(A0)+
000014BA  10FC 0020                383              MOVE.B  #' ',(A0)+
000014BE  6100 0856                384              BSR     EA_MULS
000014C2  6000 FBE8                385              BRA     endOP
000014C6  6100 0356                386  isDIVS      BSR     outaddress      *prints current address
000014CA  10FC 0044                387              MOVE.B  #'D',(A0)+
000014CE  10FC 0049                388              MOVE.B  #'I',(A0)+
000014D2  10FC 0056                389              MOVE.B  #'V',(A0)+
000014D6  10FC 0053                390              MOVE.B  #'S',(A0)+
000014DA  10FC 0020                391              MOVE.B  #' ',(A0)+
000014DE  6100 0862                392              BSR     EA_DIVS
000014E2  6000 FBC8                393              BRA     endOP
000014E6  6100 0336                394  isCMP       BSR     outaddress      *prints current address
000014EA  6100 0CC8                395              BSR     BitMask6to8     *Masking size bits
000014EE  3607                     396              MOVE.W  D7,D3           *Moving result to D3
000014F0  10FC 0043                397              MOVE.B  #'C',(A0)+
000014F4  10FC 004D                398              MOVE.B  #'M',(A0)+
000014F8  10FC 0050                399              MOVE.B  #'P',(A0)+
000014FC  10FC 002E                400              MOVE.B  #'.',(A0)+
00001500  6100 01DE                401              BSR     checkSize      *Finding size, outputting it, and storing it
00001504  10FC 0020                402              MOVE.B  #' ',(A0)+
00001508  6100 07C0                403              BSR     EA_CMP
0000150C  6000 FB9E                404              BRA     endOP
00001510  6100 030C                405  isCMPI      BSR     outaddress      *prints current address
00001514  6100 0CAC                406              BSR     BitMask6to7     *Masking size bits
00001518  3607                     407              MOVE.W  D7,D3           *Moving result to D3
0000151A  10FC 0043                408              MOVE.B  #'C',(A0)+
0000151E  10FC 004D                409              MOVE.B  #'M',(A0)+
00001522  10FC 0050                410              MOVE.B  #'P',(A0)+
00001526  10FC 0049                411              MOVE.B  #'I',(A0)+
0000152A  10FC 002E                412              MOVE.B  #'.',(A0)+
0000152E  6100 01B0                413              BSR     checkSize       *Finding size, outputting it, and storing it
00001532  10FC 0020                414              MOVE.B  #' ',(A0)+
00001536  6100 07B6                415              BSR     EA_CMPI
0000153A  6000 FB70                416              BRA     endOP
0000153E  6100 02DE                417  isLSR       BSR     outaddress      *prints current address
00001542  6100 0C7E                418              BSR     BitMask6to7     *Masking size bits
00001546  3607                     419              MOVE.W  D7,D3           *Moving result to D3
00001548  10FC 004C                420              MOVE.B  #'L',(A0)+
0000154C  10FC 0053                421              MOVE.B  #'S',(A0)+
00001550  10FC 0052                422              MOVE.B  #'R',(A0)+
00001554  10FC 002E                423              MOVE.B  #'.',(A0)+
00001558  6100 0186                424              BSR     checkSize       *Finding size, outputting it, and storing it            
0000155C  10FC 0020                425              MOVE.B  #' ',(A0)+
00001560  6000 FB4A                426              BRA     endOP
00001564  6100 02B8                427  isLSL       BSR     outaddress      *prints current address
00001568  10FC 004C                428              MOVE.B  #'L',(A0)+
0000156C  10FC 0053                429              MOVE.B  #'S',(A0)+
00001570  10FC 004C                430              MOVE.B  #'L',(A0)+
00001574  10FC 002E                431              MOVE.B  #'.',(A0)+
00001578                           432  
00001578  10FC 0020                433              MOVE.B  #' ',(A0)+
0000157C                           434  
0000157C  6000 FB2E                435              BRA     endOP
00001580  6100 029C                436  isASR       BSR     outaddress      *prints current address
00001584  10FC 0041                437              MOVE.B  #'A',(A0)+
00001588  10FC 0053                438              MOVE.B  #'S',(A0)+
0000158C  10FC 0052                439              MOVE.B  #'R',(A0)+
00001590  10FC 002E                440              MOVE.B  #'.',(A0)+
00001594                           441  
00001594  10FC 0020                442              MOVE.B  #' ',(A0)+
00001598                           443  
00001598  6000 FB12                444              BRA     endOP 
0000159C  6100 0280                445  isASL       BSR     outaddress      *prints current address
000015A0  10FC 0041                446              MOVE.B  #'A',(A0)+
000015A4  10FC 0053                447              MOVE.B  #'S',(A0)+
000015A8  10FC 004C                448              MOVE.B  #'L',(A0)+
000015AC  10FC 002E                449              MOVE.B  #'.',(A0)+
000015B0                           450  
000015B0  10FC 0020                451              MOVE.B  #' ',(A0)+
000015B4                           452  
000015B4  6000 FAF6                453              BRA     endOP
000015B8  6100 0264                454  isROR       BSR     outaddress      *prints current address
000015BC  10FC 0052                455              MOVE.B  #'R',(A0)+
000015C0  10FC 004F                456              MOVE.B  #'O',(A0)+
000015C4  10FC 0052                457              MOVE.B  #'R',(A0)+
000015C8  10FC 002E                458              MOVE.B  #'.',(A0)+
000015CC                           459  
000015CC  10FC 0020                460              MOVE.B  #' ',(A0)+
000015D0                           461  
000015D0  6000 FADA                462              BRA     endOP
000015D4  6100 0248                463  isROL       BSR     outaddress      *prints current address
000015D8  10FC 0052                464              MOVE.B  #'R',(A0)+
000015DC  10FC 004F                465              MOVE.B  #'O',(A0)+
000015E0  10FC 004C                466              MOVE.B  #'L',(A0)+
000015E4  10FC 002E                467              MOVE.B  #'.',(A0)+
000015E8                           468  
000015E8  10FC 0020                469              MOVE.B  #' ',(A0)+
000015EC                           470  
000015EC  6000 FABE                471              BRA     endOP
000015F0  6100 022C                472  isBCLR      BSR     outaddress      *prints current address
000015F4  10FC 0042                473              MOVE.B  #'B',(A0)+
000015F8  10FC 0043                474              MOVE.B  #'C',(A0)+
000015FC  10FC 004C                475              MOVE.B  #'L',(A0)+
00001600  10FC 0052                476              MOVE.B  #'R',(A0)+
00001604  10FC 0020                477              MOVE.B  #' ',(A0)+
00001608  6000 FAA2                478              BRA     endOP
0000160C  6100 0210                479  isBCS       BSR     outaddress      *prints current address
00001610  10FC 0042                480              MOVE.B  #'B',(A0)+
00001614  10FC 0043                481              MOVE.B  #'C',(A0)+
00001618  10FC 0053                482              MOVE.B  #'S',(A0)+
0000161C  10FC 0020                483              MOVE.B  #' ',(A0)+
00001620  6000 FA8A                484              BRA     endOP
00001624  6100 01F8                485  isBGE       BSR     outaddress      *prints current address
00001628  10FC 0042                486              MOVE.B  #'B',(A0)+
0000162C  10FC 0047                487              MOVE.B  #'G',(A0)+
00001630  10FC 0045                488              MOVE.B  #'E',(A0)+
00001634  10FC 0020                489              MOVE.B  #' ',(A0)+
00001638  6000 FA72                490              BRA     endOP
0000163C  6100 01E0                491  isBLT       BSR     outaddress      *prints current address
00001640  10FC 0042                492              MOVE.B  #'B',(A0)+
00001644  10FC 004C                493              MOVE.B  #'L',(A0)+
00001648  10FC 0054                494              MOVE.B  #'T',(A0)+
0000164C  10FC 0020                495              MOVE.B  #' ',(A0)+
00001650  6000 FA5A                496              BRA     endOP
00001654  6100 01C8                497  isBVC       BSR     outaddress      *prints current address
00001658  10FC 0042                498              MOVE.B  #'B',(A0)+
0000165C  10FC 0056                499              MOVE.B  #'V',(A0)+
00001660  10FC 0043                500              MOVE.B  #'C',(A0)+
00001664  10FC 0020                501              MOVE.B  #' ',(A0)+
00001668  6000 FA42                502              BRA     endOP
0000166C  6100 01B0                503  isBRA       BSR     outaddress      *prints current address
00001670  10FC 0042                504              MOVE.B  #'B',(A0)+
00001674  10FC 0052                505              MOVE.B  #'R',(A0)+
00001678  10FC 0041                506              MOVE.B  #'A',(A0)+
0000167C  10FC 0020                507              MOVE.B  #' ',(A0)+
00001680  6000 FA2A                508              BRA     endOP
00001684  6100 0198                509  isJSR       BSR     outaddress      *prints current address
00001688  10FC 004A                510              MOVE.B  #'J',(A0)+
0000168C  10FC 0053                511              MOVE.B  #'S',(A0)+
00001690  10FC 0052                512              MOVE.B  #'R',(A0)+
00001694  10FC 0020                513              MOVE.B  #' ',(A0)+
00001698  6000 FA12                514              BRA     endOP
0000169C  6100 0180                515  isRTS       BSR     outaddress      *prints current address
000016A0  10FC 0052                516              MOVE.B  #'R',(A0)+
000016A4  10FC 0054                517              MOVE.B  #'T',(A0)+
000016A8  10FC 0053                518              MOVE.B  #'S',(A0)+
000016AC  10FC 0020                519              MOVE.B  #' ',(A0)+
000016B0  6000 F9FA                520              BRA     endOP
000016B4                           521  isNEG       
000016B4                           522  *BSR     outaddress      *prints current address
000016B4  10FC 004E                523              MOVE.B  #'N',(A0)+
000016B8  10FC 0045                524              MOVE.B  #'E',(A0)+
000016BC  10FC 0047                525              MOVE.B  #'G',(A0)+
000016C0  10FC 0020                526              MOVE.B  #' ',(A0)+
000016C4  6100 02D0                527              BSR     EA_NEG
000016C8  6000 F9E2                528              BRA     endOP
000016CC                           529  
000016CC                           530  isLEA
000016CC  10FC 004C                531              MOVE.B  #'L', (A0)+
000016D0  10FC 0045                532              MOVE.B  #'E', (A0)+
000016D4  10FC 0041                533              MOVE.B  #'A', (A0)+
000016D8  10FC 0020                534              MOVE.B  #' ', (A0)+
000016DC  6000 F9CE                535              BRA     endOP
000016E0                           536  
000016E0                           537  
000016E0                           538  *Input: size bits on D3
000016E0                           539  *Prints size to stack
000016E0                           540  *Returns size (1=byte, 2=word, 3=long) on D4
000016E0                           541  *Returns mode (1=source, 2=destination) on D5
000016E0                           542  checkSize
000016E0  B67C 0000                543              CMP.W   #%000,D3        *Compares size bits and calls proper function
000016E4  6700 005C                544              BEQ     Size000
000016E8                           545  
000016E8  B67C 0000                546              CMP.W   #%00,D3        *Compares size bits and calls proper function
000016EC  6700 0062                547              BEQ     Size00
000016F0                           548  
000016F0  B67C 0001                549              CMP.W   #%01,D3        *Compares size bits and calls proper function
000016F4  6700 0068                550              BEQ     Size01    
000016F8                           551  
000016F8  B67C 0002                552              CMP.W   #%10,D3        *Compares size bits and calls proper function
000016FC  6700 006E                553              BEQ     Size10    
00001700                           554  
00001700  B67C 0003                555              CMP.W   #%11,D3        *Compares size bits and calls proper function
00001704  6700 0074                556              BEQ     Size11       
00001708                           557  
00001708  B67C 0001                558              CMP.W   #%001,D3
0000170C  6700 007A                559              BEQ     Size001
00001710                           560  
00001710  B67C 0002                561              CMP.W   #%010,D3
00001714  6700 0080                562              BEQ     Size010
00001718                           563  
00001718  B67C 0004                564              CMP.W   #%100,D3
0000171C  6700 0086                565              BEQ     Size100
00001720                           566  
00001720  B67C 0005                567              CMP.W   #%101,D3
00001724  6700 008C                568              BEQ     Size101
00001728                           569  
00001728  B67C 0006                570              CMP.W   #%110,D3
0000172C  6700 0092                571              BEQ     Size110
00001730                           572  
00001730  B67C 0003                573              CMP.W   #%011,D3
00001734  6700 0098                574              BEQ     Size011
00001738                           575  
00001738  B67C 0007                576              CMP.W   #%111,D3
0000173C  6700 009C                577              BEQ     Size111
00001740                           578  
00001740  4E75                     579              RTS
00001742                           580  
00001742                           581  
00001742  10FC 0042                582  Size000     MOVE.B  #'B',(A0)+      *prints size to stack and moves return data to D4,D5   
00001746  183C 0001                583              MOVE.B  #1,D4
0000174A  1A3C 0001                584              MOVE.B  #1,D5
0000174E  4E75                     585              RTS
00001750                           586  
00001750  10FC 0042                587  Size00      MOVE.B  #'B',(A0)+   
00001754  183C 0001                588              MOVE.B  #1,D4
00001758  1A3C 0001                589              MOVE.B  #1,D5
0000175C  4E75                     590              RTS
0000175E                           591  
0000175E  10FC 0057                592  Size01      MOVE.B  #'W',(A0)+   
00001762  183C 0002                593              MOVE.B  #2,D4
00001766  1A3C 0001                594              MOVE.B  #1,D5
0000176A  4E75                     595              RTS
0000176C                           596  
0000176C  10FC 004C                597  Size10      MOVE.B  #'L',(A0)+   
00001770  183C 0003                598              MOVE.B  #3,D4
00001774  1A3C 0001                599              MOVE.B  #1,D5
00001778  4E75                     600              RTS
0000177A                           601  
0000177A  10FC 0057                602  Size11      MOVE.B  #'W',(A0)+   
0000177E  183C 0002                603              MOVE.B  #2,D4
00001782  1A3C 0001                604              MOVE.B  #1,D5
00001786  4E75                     605              RTS
00001788                           606  
00001788                           607  
00001788  10FC 0057                608  Size001     MOVE.B  #'W',(A0)+
0000178C  183C 0002                609              MOVE.B  #2,D4
00001790  1A3C 0001                610              MOVE.B  #1,D5
00001794  4E75                     611              RTS
00001796                           612  
00001796  10FC 004C                613  Size010     MOVE.B  #'L',(A0)+
0000179A  183C 0003                614              MOVE.B  #3,D4
0000179E  1A3C 0001                615              MOVE.B  #1,D5
000017A2  4E75                     616              RTS
000017A4                           617  
000017A4  10FC 0042                618  Size100     MOVE.B  #'B',(A0)+
000017A8  183C 0001                619              MOVE.B  #1,D4
000017AC  1A3C 0002                620              MOVE.B  #2,D5
000017B0  4E75                     621              RTS
000017B2                           622  
000017B2  10FC 0057                623  Size101     MOVE.B  #'W',(A0)+
000017B6  183C 0002                624              MOVE.B  #2,D4
000017BA  1A3C 0002                625              MOVE.B  #2,D5
000017BE  4E75                     626              RTS
000017C0                           627  
000017C0  10FC 004C                628  Size110     MOVE.B  #'L',(A0)+
000017C4  183C 0003                629              MOVE.B  #3,D4
000017C8  1A3C 0002                630              MOVE.B  #2,D5
000017CC  4E75                     631              RTS
000017CE                           632  
000017CE  10FC 0057                633  Size011     MOVE.B  #'W',(A0)+
000017D2  183C 0002                634              MOVE.B  #2,D4
000017D6  1A3C 0001                635              MOVE.B  #1,D5
000017DA                           636  
000017DA  10FC 0057                637  Size111     MOVE.B  #'W',(A0)+
000017DE  183C 0003                638              MOVE.B  #3,D4
000017E2  1A3C 0001                639              MOVE.B  #1,D5
000017E6                           640  
000017E6                           641  *Masks to make comparisons easier
000017E6  3400                     642  compMask    MOVE.W  D0,D2           *Gets fresh copy of D0
000017E8  0242 F1C0                643              ANDI.W  #opMask,D2      *Masks D2 for rest of comparisons
000017EC  4E75                     644              RTS
000017EE  3400                     645  mask15to8   MOVE.W  D0,D2               *Gets fresh copy of D0
000017F0  0242 FF00                646              ANDI.W  #BitMask15to8,D2    *Masks D2 for the first byte
000017F4  4E75                     647              RTS
000017F6  3400                     648  mask15to12  MOVE.W  D0,D2               *Gets fresh copy of D0
000017F8  0242 F000                649              ANDI.W  #BitMask15to12,D2   *Masks first bit
000017FC  4E75                     650              RTS
000017FE  3400                     651  mask15to7   MOVE.W  D0,D2               *Gets fresh copy of D0
00001800  0242 FF80                652              ANDI.W  #BitMask15to7,D2    *Masks D2
00001804  4E75                     653              RTS
00001806  3400                     654  mask15to6   MOVE.W  D0,D2               *Gets fresh copy of D0
00001808  0242 FFC0                655              ANDI.W  #BitMask15to6,D2    *Masks D2
0000180C  4E75                     656              RTS
0000180E  3400                     657  maskMulDivl MOVE.W  D0,D2               *Gets fresh copy of D0
00001810  0242 8BC0                658              ANDI.W  #BitMaskMulDivl,D2  *Masks D2
00001814  4E75                     659              RTS
00001816  3400                     660  maskShift   MOVE.W  D0,D2               *Gets a fresh copy of D0
00001818  0242 F118                661              ANDI.W  #BitMaskShifts,D2   *Masks D2
0000181C  4E75                     662              RTS
0000181E                           663              
0000181E                           664  *prints address
0000181E  3F02                     665  outaddress  MOVE.W  D2,-(sp)        *Saves D2
00001820  340D                     666              MOVE.W  A5,D2           *Moves current address to D2
00001822  6100 0030                667              BSR     n2ascii         *prints current address
00001826  341F                     668              MOVE.W  (sp)+,D2        *Loads D2
00001828  1239 00002102            669              MOVE.B  space,D1        *Loads ascii space in D1
0000182E  103C 0006                670              MOVE.B  #6,D0           *Sets up trap
00001832  4E4F                     671              TRAP    #15
00001834  4E75                     672              RTS
00001836                           673              
00001836                           674  *prints word 'DATA '            
00001836  43F9 00002106            675  isData      LEA     datastring,A1   *Loads datastring for printing
0000183C  103C 000E                676              MOVE.B  #14,D0          *Sets up Trap
00001840  4E4F                     677              TRAP    #15
00001842                           678  *prints the data
00001842  6100 0010                679              BSR     n2ascii         *Prints out the data
00001846  43F9 00002103            680              LEA     newline,A1      *Sets up trap for new line
0000184C  103C 000E                681              MOVE.B  #14,D0
00001850  4E4F                     682              TRAP    #15
00001852  4E75                     683              RTS
00001854                           684  **************************************************
00001854                           685  *Takes the word hex in D2 and prints it to screen*
00001854                           686  **************************************************
00001854                           687  
00001854  183C 000C                688  n2ascii     MOVE.B  #12,D4          *Sets up D4 as counter.
00001858  3602                     689  n2ascii2    MOVE.W  D2,D3           *Moves to D3 to work on there 
0000185A  E86B                     690              LSR.W   D4,D3           
0000185C  0243 000F                691              ANDI.W  #$000F,D3       *Masks to check last nibble
00001860  B63C 0000                692              CMP.B   #$0,D3          *Chekcs if D3 is equal to 0
00001864  6700 0086                693              BEQ     print0
00001868  B63C 0001                694              CMP.B   #$1,D3          *Chekcs if D3 is equal to 1
0000186C  6700 0088                695              BEQ     print1
00001870  B63C 0002                696              CMP.B   #$2,D3          *Chekcs if D3 is equal to 2
00001874  6700 008A                697              BEQ     print2
00001878  B63C 0003                698              CMP.B   #$3,D3          *Chekcs if D3 is equal to 3
0000187C  6700 008C                699              BEQ     print3
00001880  B63C 0004                700              CMP.B   #$4,D3          *Chekcs if D3 is equal to 4
00001884  6700 008E                701              BEQ     print4
00001888  B63C 0005                702              CMP.B   #$5,D3          *Chekcs if D3 is equal to 5
0000188C  6700 0090                703              BEQ     print5
00001890  B63C 0006                704              CMP.B   #$6,D3          *Chekcs if D3 is equal to 6
00001894  6700 0092                705              BEQ     print6
00001898  B63C 0007                706              CMP.B   #$7,D3          *Chekcs if D3 is equal to 7
0000189C  6700 0094                707              BEQ     print7
000018A0  B63C 0008                708              CMP.B   #$8,D3          *Chekcs if D3 is equal to 8
000018A4  6700 0096                709              BEQ     print8
000018A8  B63C 0009                710              CMP.B   #$9,D3          *Chekcs if D3 is equal to 9
000018AC  6700 0098                711              BEQ     print9
000018B0  B63C 000A                712              CMP.B   #$A,D3          *Chekcs if D3 is equal to A
000018B4  6700 009A                713              BEQ     printA
000018B8  B63C 000B                714              CMP.B   #$B,D3          *Chekcs if D3 is equal to B
000018BC  6700 009C                715              BEQ     printB
000018C0  B63C 000C                716              CMP.B   #$C,D3          *Chekcs if D3 is equal to C
000018C4  6700 009E                717              BEQ     printC
000018C8  B63C 000D                718              CMP.B   #$D,D3          *Chekcs if D3 is equal to D
000018CC  6700 00A0                719              BEQ     printD
000018D0  B63C 000E                720              CMP.B   #$E,D3          *Chekcs if D3 is equal to E
000018D4  6700 00A2                721              BEQ     printE
000018D8  B63C 000F                722              CMP.B   #$F,D3          *Checks if D3 is equal to F
000018DC  6700 00A4                723              BEQ     printF
000018E0  5904                     724  n2acheck    SUB.B   #4,D4           *Decrements our counter
000018E2  B83C 0000                725              CMP.B   #0,D4           *Checks if counter reached 0
000018E6  6C00 FF70                726              BGE     n2ascii2        *Returns to top of loop to continue        
000018EA  4E75                     727              RTS                     *Else return to caller
000018EC                           728  
000018EC  4281                     729  print0      CLR.L   D1              *Clears D1
000018EE  123C 0030                730              MOVE.B  #$30,D1         *Sets D1 as ascii 0
000018F2  6000 0098                731              BRA     printchar       *prints the character
000018F6  4281                     732  print1      CLR.L   D1              *Clears D1
000018F8  123C 0031                733              MOVE.B  #$31,D1         *Sets D1 as ascii 1
000018FC  6000 008E                734              BRA     printchar       *prints the character
00001900  4281                     735  print2      CLR.L   D1              *Clears D1
00001902  123C 0032                736              MOVE.B  #$32,D1         *Sets D1 as ascii 2
00001906  6000 0084                737              BRA     printchar       *prints the character
0000190A  4281                     738  print3      CLR.L   D1              *Clears D1
0000190C  123C 0033                739              MOVE.B  #$33,D1         *Sets D1 as ascii 3
00001910  6000 007A                740              BRA     printchar       *prints the character
00001914  4281                     741  print4      CLR.L   D1              *Clears D1
00001916  123C 0034                742              MOVE.B  #$34,D1         *Sets D1 as ascii 4
0000191A  6000 0070                743              BRA     printchar       *prints the character
0000191E  4281                     744  print5      CLR.L   D1              *Clears D1
00001920  123C 0035                745              MOVE.B  #$35,D1         *Sets D1 as ascii 5
00001924  6000 0066                746              BRA     printchar       *prints the character
00001928  4281                     747  print6      CLR.L   D1              *Clears D1
0000192A  123C 0036                748              MOVE.B  #$36,D1         *Sets D1 as ascii 6
0000192E  6000 005C                749              BRA     printchar       *prints the character
00001932  4281                     750  print7      CLR.L   D1              *Clears D1
00001934  123C 0037                751              MOVE.B  #$37,D1         *Sets D1 as ascii 7
00001938  6000 0052                752              BRA     printchar       *prints the character
0000193C  4281                     753  print8      CLR.L   D1              *Clears D1
0000193E  123C 0038                754              MOVE.B  #$38,D1         *Sets D1 as ascii 8
00001942  6000 0048                755              BRA     printchar       *prints the character
00001946  4281                     756  print9      CLR.L   D1              *Clears D1
00001948  123C 0039                757              MOVE.B  #$39,D1         *Sets D1 as ascii 9
0000194C  6000 003E                758              BRA     printchar       *prints the character
00001950  4281                     759  printA      CLR.L   D1              *Clears D1
00001952  123C 0041                760              MOVE.B  #$41,D1         *Sets D1 as ascii A
00001956  6000 0034                761              BRA     printchar       *prints the character
0000195A  4281                     762  printB      CLR.L   D1              *Clears D1
0000195C  123C 0042                763              MOVE.B  #$42,D1         *Sets D1 as ascii B
00001960  6000 002A                764              BRA     printchar       *prints the character
00001964  4281                     765  printC      CLR.L   D1              *Clears D1
00001966  123C 0043                766              MOVE.B  #$43,D1         *Sets D1 as ascii C
0000196A  6000 0020                767              BRA     printchar       *prints the character
0000196E  4281                     768  printD      CLR.L   D1              *Clears D1
00001970  123C 0044                769              MOVE.B  #$44,D1         *Sets D1 as ascii D
00001974  6000 0016                770              BRA     printchar       *prints the character
00001978  4281                     771  printE      CLR.L   D1              *Clears D1
0000197A  123C 0045                772              MOVE.B  #$45,D1         *Sets D1 as ascii E
0000197E  6000 000C                773              BRA     printchar       *prints the character         
00001982  4281                     774  printF      CLR.L   D1              *Clears D1
00001984  123C 0046                775              MOVE.B  #$46,D1         *Sets D1 as ascii F
00001988  6000 0002                776              BRA     printchar       *prints the character
0000198C  103C 0006                777  printchar   MOVE.B  #6,D0           *Sets up Trap
00001990  4E4F                     778              TRAP    #15
00001992  6000 FF4C                779              BRA     n2acheck        *returns to n2ascii
00001996                           780  
00001996                           781  *EA FUNCTIONS:
00001996                           782  *D0 is assumed to be input line
00001996                           783  *Using D2 to store Addressing Mode
00001996                           784  *Using D3 to store Register
00001996                           785  *Using D7 to store return values
00001996                           786  
00001996                           787  *Input: D0 (Input Line)
00001996                           788  EA_NEG                              ;Parsing EA for NEG function
00001996                           789  
00001996  6100 0838                790        BSR         BitMask3to5       ;isolating destination address mode
0000199A  2407                     791        MOVE.L      D7,D2             ;moving return value to D2
0000199C                           792  
0000199C  6100 083E                793        BSR         BitMask0to2       ;isloating destination address register
000019A0  2607                     794        MOVE.L      D7,D3             ;Moving return value to D3
000019A2                           795  
000019A2  B4BC 00000001            796        CMP.L       #%001,D2           ;Address register direct is not a valid input for NEG
000019A8  6700 0754                797        BEQ         ERROR
000019AC                           798  
000019AC  B47C 0007                799        CMP.W       #%111,D2          ;Immediate Data is not a valid EA mode
000019B0  6700 072C                800        BEQ         EA_BlOCK_IMMEDIATE
000019B4                           801  
000019B4  6100 04DE                802        BSR         EA_PARSE_MODE     ;Calling parse mode function to write data to the stack
000019B8                           803  
000019B8  4E75                     804        RTS                           ;Returning to source
000019BA                           805  
000019BA                           806  *Input: D0 (Input Line)
000019BA                           807  EA_EOR                              ;Parsing EA for EOR function
000019BA  6100 07E8                808        BSR         BitMask9to11      ;isolating source register
000019BE  2607                     809        MOVE.L      D7,D3             ;moving result to D3
000019C0  6100 051E                810        BSR         EA_PARSE_Dn       ;printing data register to A0 stack
000019C4                           811  
000019C4  10F8 002C                812        MOVE.B      ',',(A0)+         ;pushing ", " to the stack.
000019C8  10F8 0020                813        MOVE.B      ' ',(A0)+
000019CC                           814  
000019CC  6100 0802                815        BSR         BitMask3to5       ;isolating destination address mode
000019D0  2407                     816        MOVE.L      D7,D2             ;moving return value to D2
000019D2                           817  
000019D2  6100 0808                818        BSR         BitMask0to2       ;isloating destination address register
000019D6  2607                     819        MOVE.L      D7,D3             ;Moving return value to D3
000019D8                           820  
000019D8  B4BC 00000001            821        CMP.L       #%001,D2          ;Address register direct is not a valid input for EOR
000019DE  6700 071E                822        BEQ         ERROR
000019E2                           823  
000019E2  6100 04B0                824        BSR         EA_PARSE_MODE     ;Calling parse mode function to write data to the stack
000019E6                           825  
000019E6  4E75                     826        RTS                           ;Returning to source
000019E8                           827  
000019E8                           828  *Input: D0 (Input Line)
000019E8                           829  EA_ADDA                              ;Parsing EA for ADDA function
000019E8                           830  
000019E8                           831  
000019E8  6100 07E6                832        BSR         BitMask3to5       ;isolating destination address mode
000019EC  2407                     833        MOVE.L      D7,D2             ;moving return value to D2
000019EE                           834  
000019EE  6100 07EC                835        BSR         BitMask0to2       ;isloating destination address register
000019F2  2607                     836        MOVE.L      D7,D3             ;Moving return value to D3
000019F4                           837  
000019F4  6100 049E                838        BSR         EA_PARSE_MODE     ;Calling parse mode function to write data to the stack
000019F8                           839  
000019F8  10F8 002C                840        MOVE.B      ',',(A0)+         ;pushing ", " to the stack.
000019FC  10F8 0020                841        MOVE.B      ' ',(A0)+
00001A00                           842  
00001A00  6100 07A2                843        BSR         BitMask9to11      ;isolating source register
00001A04  2607                     844        MOVE.L      D7,D3             ;moving result to D3
00001A06  6100 04E4                845        BSR         EA_PARSE_An       ;printing data register to A0 stack
00001A0A                           846  
00001A0A  4E75                     847        RTS                           ;Returning to source
00001A0C                           848  
00001A0C                           849  
00001A0C                           850  *Input: D0 (input Line)
00001A0C                           851  *Input: D5 (OPMOde type (1 or 2))
00001A0C                           852  EA_OR                               ;Parsing EA for OR function
00001A0C  1205                     853        MOVE.B      D5,D1             ;moving input opmode type to D1
00001A0E  4285                     854        CLR.L       D5                ;clearing D5
00001A10                           855  
00001A10  6100 07A2                856        BSR         BitMask6to8       ;isolating register number
00001A14  2A07                     857        MOVE.L      D7,D5             ;moving return value to D5
00001A16                           858  
00001A16  6100 07B8                859        BSR         BitMask3to5       ;isolating destination address mode
00001A1A  2407                     860        MOVE.L      D7,D2             ;moving return value to D2
00001A1C                           861  
00001A1C  6100 07BE                862        BSR         BitMask0to2       ;isloating destination address register
00001A20  2607                     863        MOVE.L      D7,D3             ;Moving return value to D3
00001A22                           864  
00001A22  B23C 0001                865        CMP.B       #1,D1             ;if the OPMode is type 1, the EA is the source
00001A26  6700 0010                866        BEQ         EA_OR_SOURCE      
00001A2A                           867  
00001A2A  B23C 0002                868        CMP.B       #2,D1             ;if the OPMode is type 2, the EA is the destination
00001A2E  6700 0008                869        BEQ         EA_OR_SOURCE
00001A32                           870  
00001A32  10FC 0000                871        MOVE.B      #0,(A0)+          ;Terminating character
00001A36                           872  
00001A36  4E75                     873        RTS                           ;Returning to source
00001A38                           874  
00001A38                           875  *Called if the EA address field is a source operand
00001A38                           876  EA_OR_SOURCE
00001A38  B4BC 00000001            877        CMP.L       #%001,D2           ;Address register direct is not a valid input for EA Source
00001A3E  6700 06BE                878        BEQ         ERROR
00001A42                           879  
00001A42  6100 0450                880        BSR         EA_PARSE_MODE     ;outputing the source EA
00001A46                           881  
00001A46  10FC 002C                882        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001A4A  10FC 0020                883        MOVE.B      #' ',(A0)+
00001A4E                           884  
00001A4E  2605                     885        MOVE.L      D5,D3             ;Moving register number to D3
00001A50  6100 048E                886        BSR         EA_PARSE_Dn       ;Outputting register
00001A54                           887  
00001A54  4E75                     888        RTS
00001A56                           889  
00001A56                           890  *Called if the EA address field is a destinaton operand
00001A56                           891  EA_OR_DESTINATION
00001A56  B4BC 00000000            892        CMP.L       #%000,D2           ;Data register direct is not a valid input for EA Source
00001A5C  6700 06A0                893        BEQ         ERROR
00001A60                           894  
00001A60  B4BC 00000001            895        CMP.L       #%001,D2           ;Address register direct is not a valid input for EA Source
00001A66  6700 0696                896        BEQ         ERROR
00001A6A                           897  
00001A6A  2C03                     898        MOVE.L      D3,D6             ;backing up EA register to D6
00001A6C  2605                     899        MOVE.L      D5,D3             ;Moving register number to D3
00001A6E  6100 0470                900        BSR         EA_PARSE_Dn       ;Outputting register
00001A72                           901  
00001A72  10FC 002C                902        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001A76  10FC 0020                903        MOVE.B      #' ',(A0)+
00001A7A                           904  
00001A7A  2606                     905        MOVE.L      D6,D3             ;Moving EA register back
00001A7C  6100 0416                906        BSR         EA_PARSE_MODE     ;outputing the destination EA
00001A80                           907  
00001A80                           908  
00001A80  4E75                     909        RTS
00001A82                           910  
00001A82                           911  
00001A82                           912  *Input: D0 (Input Line)
00001A82                           913  *Input: D1 (immediate data source)
00001A82                           914  EA_ORI                              ;Parsing EA for ORI function
00001A82                           915  
00001A82  6100 04B8                916        BSR         EA_PARSE_IMMEDIATE_DATA  ;displays immediate data
00001A86                           917  
00001A86  10FC 002C                918        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001A8A  10FC 0020                919        MOVE.B      #' ',(A0)+
00001A8E                           920  
00001A8E  6100 0740                921        BSR         BitMask3to5       ;isolating destination address mode
00001A92  2407                     922        MOVE.L      D7,D2             ;moving return value to D2
00001A94                           923  
00001A94  6100 0746                924        BSR         BitMask0to2       ;isloating destination address register
00001A98  2607                     925        MOVE.L      D7,D3             ;Moving return value to D3
00001A9A                           926  
00001A9A  6100 04A0                927        BSR         EA_PARSE_IMMEDIATE_DATA  ;parsing immediate data
00001A9E                           928  
00001A9E  10FC 002C                929        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001AA2  10FC 0020                930        MOVE.B      #' ',(A0)+
00001AA6                           931  
00001AA6  B4BC 00000001            932        CMP.L       #%001,D2           ;Address register direct is not a valid input for ORI
00001AAC  6700 0650                933        BEQ         ERROR
00001AB0                           934  
00001AB0  B47C 0007                935        CMP.W       #%111,D2          ;Immediate Data is not a valid EA mode
00001AB4  6700 0628                936        BEQ         EA_BlOCK_IMMEDIATE
00001AB8                           937  
00001AB8  6100 03DA                938        BSR         EA_PARSE_MODE     ;Calling parse mode function to write data to the stack
00001ABC                           939  
00001ABC  4E75                     940        RTS                           ;Returning to source
00001ABE                           941  
00001ABE                           942  
00001ABE                           943  *Input: D0 (input Line)
00001ABE                           944  *Input: D5 (OPMOde type (1 or 2))
00001ABE                           945  EA_AND                              ;Parsing EA for AND function
00001ABE  1205                     946        MOVE.B      D5,D1             ;moving input opmode type to D1
00001AC0  4285                     947        CLR.L       D5                ;clearing D5
00001AC2                           948  
00001AC2  6100 06E0                949        BSR         BitMask9to11      ;isolating register number
00001AC6  2A07                     950        MOVE.L      D7,D5             ;moving return value to D5
00001AC8                           951  
00001AC8  6100 0706                952        BSR         BitMask3to5       ;isolating destination address mode
00001ACC  2407                     953        MOVE.L      D7,D2             ;moving return value to D2
00001ACE                           954  
00001ACE  6100 070C                955        BSR         BitMask0to2       ;isloating destination address register
00001AD2  2607                     956        MOVE.L      D7,D3             ;Moving return value to D3
00001AD4                           957  
00001AD4  B23C 0001                958        CMP.B       #1,D1             ;if the OPMode is type 1, the EA is the source
00001AD8  6700 0010                959        BEQ         EA_AND_SOURCE      
00001ADC                           960  
00001ADC  B23C 0002                961        CMP.B       #2,D1             ;if the OPMode is type 2, the EA is the destination
00001AE0  6700 0008                962        BEQ         EA_AND_SOURCE
00001AE4                           963  
00001AE4  10FC 0000                964        MOVE.B      #0,(A0)+          ;Terminating character
00001AE8                           965  
00001AE8  4E75                     966        RTS                           ;Returning to source
00001AEA                           967  
00001AEA                           968  *Called if the EA address field is a source operand
00001AEA                           969  EA_AND_SOURCE
00001AEA                           970  
00001AEA  B4BC 00000001            971        CMP.L       #%001,D2           ;Address register direct is not a valid input for EA source
00001AF0  6700 060C                972        BEQ         ERROR
00001AF4                           973  
00001AF4  6100 039E                974        BSR         EA_PARSE_MODE     ;outputing the source EA
00001AF8                           975  
00001AF8  10FC 002C                976        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001AFC  10FC 0020                977        MOVE.B      #' ',(A0)+
00001B00                           978  
00001B00  2605                     979        MOVE.L      D5,D3             ;Moving register number to D3
00001B02  6100 03DC                980        BSR         EA_PARSE_Dn       ;Outputting register
00001B06                           981  
00001B06  4E75                     982        RTS
00001B08                           983  
00001B08                           984  *Called if the EA address field is a destinaton operand
00001B08                           985  EA_AND_DESTINATION
00001B08  B4BC 00000000            986        CMP.L       #%000,D2           ;Data register direct is not a valid input for EA destinaton
00001B0E  6700 05EE                987        BEQ         ERROR
00001B12                           988  
00001B12  B4BC 00000001            989        CMP.L       #%001,D2           ;Address register direct is not a valid input for EA destinaton
00001B18  6700 05E4                990        BEQ         ERROR
00001B1C                           991  
00001B1C  2C03                     992        MOVE.L      D3,D6             ;backing up EA register to D6
00001B1E  2E05                     993        MOVE.L      D5,D7             ;Moving register number to D3
00001B20  6100 03BE                994        BSR         EA_PARSE_Dn       ;Outputting register
00001B24                           995  
00001B24  10FC 002C                996        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001B28  10FC 0020                997        MOVE.B      #' ',(A0)+
00001B2C                           998  
00001B2C  2E06                     999        MOVE.L      D6,D7             ;Moving EA register back
00001B2E  6100 0364               1000        BSR         EA_PARSE_MODE     ;outputing the destination EA
00001B32                          1001  
00001B32                          1002  
00001B32  4E75                    1003        RTS
00001B34                          1004  
00001B34                          1005  EA_ANDI                             ;Parsing EA for ANDI function
00001B34                          1006  
00001B34  6100 069A               1007        BSR         BitMask3to5       ;isolating destination address mode
00001B38  2407                    1008        MOVE.L      D7,D2             ;moving return value to D2
00001B3A                          1009  
00001B3A  6100 06A0               1010        BSR         BitMask0to2       ;isloating destination address register
00001B3E  2607                    1011        MOVE.L      D7,D3             ;Moving return value to D3
00001B40                          1012  
00001B40  6100 03FA               1013        BSR         EA_PARSE_IMMEDIATE_DATA          
00001B44                          1014  
00001B44  10FC 002C               1015        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001B48  10FC 0020               1016        MOVE.B      #' ',(A0)+
00001B4C                          1017  
00001B4C  B4BC 00000001           1018        CMP.L       #%001,D2           ;Address register direct is not a valid input for EA destinaton
00001B52  6700 05AA               1019        BEQ         ERROR
00001B56                          1020  
00001B56  2E05                    1021        MOVE.L      D5,D7
00001B58  6100 033A               1022        BSR         EA_PARSE_MODE       ;outputting Address register destination
00001B5C                          1023  
00001B5C  4E75                    1024        RTS                           ;Returning to source
00001B5E                          1025  
00001B5E                          1026  *Input: D0 (input Line)
00001B5E                          1027  *Input: D5 (OPMOde type (1 or 2))
00001B5E                          1028  *Input: D4 (Size (1,2, or 3))
00001B5E                          1029  EA_SUB                              ;Parsing EA for AND function
00001B5E  1205                    1030        MOVE.B      D5,D1             ;moving input opmode type to D1
00001B60  4285                    1031        CLR.L       D5                ;clearing D5
00001B62                          1032  
00001B62  1404                    1033        MOVE.B      D4,D2             ;moving input opmode type to D2
00001B64  4284                    1034        CLR.L       D4                ;clearing D4
00001B66                          1035  
00001B66  2802                    1036        MOVE.L      D2,D4             ;moving isbyte variable to D4
00001B68                          1037  
00001B68  6100 063A               1038        BSR         BitMask9to11      ;isolating register number
00001B6C  2A07                    1039        MOVE.L      D7,D5             ;moving return value to D5
00001B6E                          1040  
00001B6E  6100 0660               1041        BSR         BitMask3to5       ;isolating destination address mode
00001B72  2407                    1042        MOVE.L      D7,D2             ;moving return value to D2
00001B74                          1043  
00001B74  6100 0666               1044        BSR         BitMask0to2       ;isloating destination address register
00001B78  2607                    1045        MOVE.L      D7,D3             ;Moving return value to D3
00001B7A                          1046  
00001B7A  B23C 0001               1047        CMP.B       #1,D1             ;if the OPMode is type 1, the EA is the source
00001B7E  6700 FF6A               1048        BEQ         EA_AND_SOURCE      
00001B82                          1049  
00001B82  B23C 0002               1050        CMP.B       #2,D1             ;if the OPMode is type 2, the EA is the destination
00001B86  6700 FF62               1051        BEQ         EA_AND_SOURCE
00001B8A                          1052  
00001B8A  4E75                    1053        RTS                           ;Returning to source
00001B8C                          1054  
00001B8C                          1055  *Called if the EA address field is a source operand
00001B8C                          1056  EA_SUB_SOURCE
00001B8C                          1057  
00001B8C  B4BC 00000000           1058        CMP.L       #%000,D2           ;Address register direct is not a valid input for EA source
00001B92  B8BC 00000001           1059        CMP.L       #1,D4             ;if it is a byte-sized operation
00001B98  6700 0564               1060        BEQ         ERROR
00001B9C                          1061  
00001B9C  6100 02F6               1062        BSR         EA_PARSE_MODE     ;outputing the source EA
00001BA0                          1063  
00001BA0  10FC 002C               1064        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001BA4  10FC 0020               1065        MOVE.B      #' ',(A0)+
00001BA8                          1066  
00001BA8  2605                    1067        MOVE.L      D5,D3             ;Moving register number to D3
00001BAA  6100 0334               1068        BSR         EA_PARSE_Dn       ;Outputting register
00001BAE                          1069  
00001BAE  4E75                    1070        RTS
00001BB0                          1071  
00001BB0                          1072  *Called if the EA address field is a destinaton operand
00001BB0                          1073  EA_SUB_DESTINATION
00001BB0  B4BC 00000000           1074        CMP.L       #%000,D2           ;Data register direct is not a valid input for EA destinaton
00001BB6  6700 0546               1075        BEQ         ERROR
00001BBA                          1076  
00001BBA  B4BC 00000001           1077        CMP.L       #%001,D2           ;Address register direct is not a valid input for EA destinaton
00001BC0  6700 053C               1078        BEQ         ERROR
00001BC4                          1079  
00001BC4  2803                    1080        MOVE.L      D3,D4             ;backing up EA register to D4
00001BC6  2605                    1081        MOVE.L      D5,D3             ;Moving register number to D3
00001BC8  6100 0316               1082        BSR         EA_PARSE_Dn       ;Outputting register
00001BCC                          1083  
00001BCC  10FC 002C               1084        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001BD0  10FC 0020               1085        MOVE.B      #' ',(A0)+
00001BD4                          1086  
00001BD4  2604                    1087        MOVE.L      D4,D3             ;Moving EA register back
00001BD6  6100 02BC               1088        BSR         EA_PARSE_MODE     ;outputing the destination EA
00001BDA                          1089  
00001BDA                          1090  
00001BDA  4E75                    1091        RTS
00001BDC                          1092  
00001BDC                          1093  *Input: D0 (input Line)
00001BDC                          1094  *Input: D5 (OPMOde type (1 or 2))
00001BDC                          1095  EA_ADD                              ;Parsing EA for ADD function
00001BDC  1205                    1096        MOVE.B      D5,D1             ;moving input opmode type to D1
00001BDE  4285                    1097        CLR.L       D5                ;clearing D5
00001BE0                          1098  
00001BE0  6100 05C2               1099        BSR         BitMask9to11      ;isolating register number
00001BE4  2A07                    1100        MOVE.L      D7,D5             ;moving return value to D5
00001BE6                          1101  
00001BE6  6100 05E8               1102        BSR         BitMask3to5       ;isolating EA address mode
00001BEA  2407                    1103        MOVE.L      D7,D2             ;moving return value to D2
00001BEC                          1104  
00001BEC  6100 05EE               1105        BSR         BitMask0to2       ;isloating EA address register
00001BF0  2607                    1106        MOVE.L      D7,D3             ;Moving return value to D3
00001BF2                          1107  
00001BF2  B23C 0001               1108        CMP.B       #1,D1             ;if the OPMode is type 1, the EA is the source
00001BF6  6700 000C               1109        BEQ         EA_ADD_SOURCE      
00001BFA                          1110  
00001BFA  B23C 0002               1111        CMP.B       #2,D1             ;if the OPMode is type 2, the EA is the destination
00001BFE  6700 0004               1112        BEQ         EA_ADD_SOURCE
00001C02                          1113  
00001C02  4E75                    1114        RTS                           ;Returning to source
00001C04                          1115  
00001C04                          1116  *Called if the EA address field is a source operand
00001C04                          1117  EA_ADD_SOURCE
00001C04                          1118  
00001C04  6100 028E               1119        BSR         EA_PARSE_MODE     ;outputing the source EA
00001C08                          1120  
00001C08  10FC 002C               1121        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001C0C  10FC 0020               1122        MOVE.B      #' ',(A0)+
00001C10                          1123  
00001C10  2605                    1124        MOVE.L      D5,D3             ;Moving register number to D3
00001C12  6100 02CC               1125        BSR         EA_PARSE_Dn       ;Outputting register
00001C16                          1126  
00001C16  4E75                    1127        RTS
00001C18                          1128  
00001C18                          1129  *Called if the EA address field is a destinaton operand
00001C18                          1130  EA_ADD_DESTINATION
00001C18  B4BC 00000000           1131        CMP.L       #%000,D2           ;Data register direct is not a valid input for EA destinaton
00001C1E  6700 04DE               1132        BEQ         ERROR
00001C22                          1133  
00001C22  B4BC 00000001           1134        CMP.L       #%001,D2           ;Address register direct is not a valid input for EA destinaton
00001C28  6700 04D4               1135        BEQ         ERROR
00001C2C                          1136  
00001C2C  2803                    1137        MOVE.L      D3,D4             ;backing up EA address register
00001C2E                          1138  
00001C2E  2605                    1139        MOVE.L      D5,D3             ;Moving register to D3
00001C30  6100 02AE               1140        BSR         EA_PARSE_Dn       ;Outputting register
00001C34                          1141  
00001C34  10FC 002C               1142        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001C38  10FC 0020               1143        MOVE.B      #' ',(A0)+
00001C3C                          1144  
00001C3C  2604                    1145        MOVE.L      D4,D3             ;moving address register back
00001C3E                          1146  
00001C3E  6100 0254               1147        BSR         EA_PARSE_MODE     ;outputing the destination EA
00001C42  4E75                    1148        RTS
00001C44                          1149  
00001C44                          1150  *Input: D0 (input Line)
00001C44                          1151  *Input: D1 (Isbyte (0 or 1))
00001C44                          1152  EA_SUBQ                             ;Parsing EA for SUBQ function
00001C44                          1153  
00001C44  6100 058A               1154        BSR         BitMask3to5       ;isolating destination address mode
00001C48  2407                    1155        MOVE.L      D7,D2             ;moving return value to D2
00001C4A                          1156  
00001C4A  6100 0590               1157        BSR         BitMask0to2       ;isloating destination address register
00001C4E  2607                    1158        MOVE.L      D7,D3             ;Moving return value to D3
00001C50                          1159  
00001C50  6100 02EA               1160        BSR         EA_PARSE_IMMEDIATE_DATA          
00001C54                          1161  
00001C54  10FC 002C               1162        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001C58  10FC 0020               1163        MOVE.B      #' ',(A0)+
00001C5C                          1164  
00001C5C  B2BC 00000001           1165        CMP.L       #1,D1             ;Address register direct is not a valid input for EA destinaton
00001C62  B4BC 00000001           1166        CMP.L       #%001,D2          ;if it is a byte-operation
00001C68  6000 0494               1167        BRA         ERROR
00001C6C                          1168        
00001C6C  2E05                    1169        MOVE.L      D5,D7
00001C6E  6100 0224               1170        BSR         EA_PARSE_MODE       ;outputting Address register destination
00001C72                          1171  
00001C72  4E75                    1172        RTS                           ;Returning to source
00001C74                          1173  
00001C74                          1174  
00001C74                          1175  *Input: D0 (input Line)
00001C74                          1176  EA_MOVE                             ;Parsing EA for MOVE function
00001C74                          1177  
00001C74  6100 055A               1178        BSR         BitMask3to5       ;isolating source address mode
00001C78  2407                    1179        MOVE.L      D7,D2             ;moving return value to D2
00001C7A                          1180  
00001C7A  6100 0560               1181        BSR         BitMask0to2       ;isloating source address register
00001C7E  2607                    1182        MOVE.L      D7,D3             ;Moving return value to D3
00001C80                          1183  
00001C80  6100 0212               1184        BSR         EA_PARSE_MODE     ;parsing mode and register for the source   
00001C84                          1185  
00001C84  10FC 002C               1186        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001C88  10FC 0020               1187        MOVE.B      #' ',(A0)+
00001C8C                          1188  
00001C8C  6100 0526               1189        BSR         BitMask6to8       ;isolating destination address mode
00001C90  2407                    1190        MOVE.L      D7,D2             ;moving return value to D2
00001C92                          1191  
00001C92  6100 0510               1192        BSR         BitMask9to11       ;isloating destination address register
00001C96  2607                    1193        MOVE.L      D7,D3             ;Moving return value to D3
00001C98                          1194  
00001C98  B47C 0001               1195        CMP.W       #%001,D2           ;Address register direct is not a valid destination mode
00001C9C  6700 0460               1196        BEQ         ERROR
00001CA0                          1197  
00001CA0  6100 01F2               1198        BSR         EA_PARSE_MODE     ;parsing mode and register for the destination     
00001CA4                          1199  
00001CA4  4E75                    1200        RTS                           ;Returning to source
00001CA6                          1201  
00001CA6                          1202  *Input: D0 (input Line)
00001CA6                          1203  EA_MOVEA                            ;Parsing EA for MOVEA function
00001CA6                          1204  
00001CA6  6100 0528               1205        BSR         BitMask3to5       ;isolating source address mode
00001CAA  2407                    1206        MOVE.L      D7,D2             ;moving return value to D2
00001CAC                          1207  
00001CAC  6100 052E               1208        BSR         BitMask0to2       ;isloating source address register
00001CB0  2607                    1209        MOVE.L      D7,D3             ;Moving return value to D3
00001CB2                          1210  
00001CB2  6100 01E0               1211        BSR         EA_PARSE_MODE     ;parsing mode and register for the source   
00001CB6                          1212  
00001CB6  10FC 002C               1213        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001CBA  10FC 0020               1214        MOVE.B      #' ',(A0)+
00001CBE                          1215  
00001CBE  6100 04E4               1216        BSR         BitMask9to11      ;isloating destination address register
00001CC2                          1217  
00001CC2  2607                    1218        MOVE.L      D7,D3             ;Moving return value to D3
00001CC4  6100 0226               1219        BSR         EA_PARSE_An       ;parsing address register direct for the destination     
00001CC8                          1220  
00001CC8  4E75                    1221        RTS                           ;Returning to source
00001CCA                          1222  
00001CCA                          1223  *Input: D0 (input Line)
00001CCA                          1224  EA_CMP                             ;Parsing EA for CMP function
00001CCA                          1225  
00001CCA  6100 0504               1226        BSR         BitMask3to5       ;isolating source address mode
00001CCE  2407                    1227        MOVE.L      D7,D2             ;moving return value to D2
00001CD0                          1228  
00001CD0  6100 050A               1229        BSR         BitMask0to2       ;isloating source address register
00001CD4  2607                    1230        MOVE.L      D7,D3             ;Moving return value to D3
00001CD6                          1231  
00001CD6  6100 01BC               1232        BSR         EA_PARSE_MODE     ;parsing mode and register for the source   
00001CDA                          1233  
00001CDA  10FC 002C               1234        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001CDE  10FC 0020               1235        MOVE.B      #' ',(A0)+
00001CE2                          1236  
00001CE2  6100 04C0               1237        BSR         BitMask9to11      ;isloating destination address register
00001CE6                          1238  
00001CE6  2607                    1239        MOVE.L      D7,D3             ;Moving return value to D3
00001CE8  6100 01F6               1240        BSR         EA_PARSE_Dn       ;parsing data register direct for the destination     
00001CEC                          1241  
00001CEC  4E75                    1242        RTS                           ;Returning to source
00001CEE                          1243  
00001CEE                          1244  
00001CEE                          1245  EA_CMPI                             ;Parsing EA for CMPI function
00001CEE                          1246  
00001CEE  6100 04E0               1247        BSR         BitMask3to5       ;isolating destination address mode
00001CF2  2407                    1248        MOVE.L      D7,D2             ;moving return value to D2
00001CF4                          1249  
00001CF4  6100 04E6               1250        BSR         BitMask0to2       ;isloating destination address register
00001CF8  2607                    1251        MOVE.L      D7,D3             ;Moving return value to D3
00001CFA                          1252  
00001CFA  6100 0240               1253        BSR         EA_PARSE_IMMEDIATE_DATA          
00001CFE                          1254  
00001CFE  10FC 002C               1255        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001D02  10FC 0020               1256        MOVE.B      #' ',(A0)+
00001D06                          1257  
00001D06  B4BC 00000001           1258        CMP.L       #%001,D2           ;Address register direct is not a valid input for EA destinaton
00001D0C  6700 03F0               1259        BEQ         ERROR
00001D10                          1260  
00001D10  6100 0182               1261        BSR         EA_PARSE_MODE     ;outputting Address register destination
00001D14                          1262  
00001D14  4E75                    1263        RTS                           ;Returning to source
00001D16                          1264  
00001D16                          1265  
00001D16                          1266  *Input: D0 (input Line)
00001D16                          1267  EA_MULS                             ;Parsing EA for MULS function
00001D16                          1268  
00001D16  6100 04B8               1269        BSR         BitMask3to5       ;isolating source address mode
00001D1A  2407                    1270        MOVE.L      D7,D2             ;moving return value to D2
00001D1C                          1271  
00001D1C  6100 04BE               1272        BSR         BitMask0to2       ;isloating source address register
00001D20  2607                    1273        MOVE.L      D7,D3             ;Moving return value to D3
00001D22                          1274  
00001D22  B47C 0001               1275        CMP.W       #%001,D2           ;Address Register direct is not a valid EA Mode for DIVS
00001D26  6700 03D6               1276        BEQ         ERROR
00001D2A                          1277  
00001D2A  6100 0168               1278        BSR         EA_PARSE_MODE     ;parsing mode and register for the source   
00001D2E                          1279  
00001D2E  10FC 002C               1280        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001D32  10FC 0020               1281        MOVE.B      #' ',(A0)+
00001D36                          1282  
00001D36  6100 046C               1283        BSR         BitMask9to11      ;isloating destination address register
00001D3A                          1284  
00001D3A  2607                    1285        MOVE.L      D7,D3             ;Moving return value to D3
00001D3C  6100 01A2               1286        BSR         EA_PARSE_Dn       ;parsing data register direct for the destination     
00001D40                          1287  
00001D40  4E75                    1288        RTS                           ;Returning to source
00001D42                          1289  
00001D42                          1290  *Input: D0 (input Line)
00001D42                          1291  EA_DIVS                             ;Parsing EA for DIVS function
00001D42                          1292  
00001D42  6100 048C               1293        BSR         BitMask3to5       ;isolating source address mode
00001D46  2407                    1294        MOVE.L      D7,D2             ;moving return value to D2
00001D48                          1295  
00001D48  6100 0492               1296        BSR         BitMask0to2       ;isloating source address register
00001D4C  2607                    1297        MOVE.L      D7,D3             ;Moving return value to D3
00001D4E                          1298  
00001D4E  B47C 0001               1299        CMP.W       #%001,D2           ;Address Register direct is not a valid EA Mode for DIVS
00001D52  6700 03AA               1300        BEQ         ERROR
00001D56                          1301  
00001D56  6100 013C               1302        BSR         EA_PARSE_MODE     ;parsing mode and register for the source   
00001D5A                          1303  
00001D5A  10FC 002C               1304        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001D5E  10FC 0020               1305        MOVE.B      #' ',(A0)+
00001D62                          1306  
00001D62  6100 0440               1307        BSR         BitMask9to11      ;isloating destination address register
00001D66                          1308  
00001D66  2607                    1309        MOVE.L      D7,D3             ;Moving return value to D3
00001D68  6100 0176               1310        BSR         EA_PARSE_Dn       ;parsing data register direct for the destination     
00001D6C                          1311  
00001D6C  4E75                    1312        RTS                           ;Returning to source
00001D6E                          1313  
00001D6E                          1314  *Input: D0 (input Line)
00001D6E                          1315  EA_LS_REGISTER                      ;Parsing EA for LSR/LSL function for register shifts
00001D6E                          1316  
00001D6E  6100 04BE               1317        BSR         BitMask5to5
00001D72  2A07                    1318        MOVE.L      D7,D5             ;storing i/r value in D5
00001D74                          1319  
00001D74  6100 042E               1320        BSR         BitMask9to11      ;isloating source EA source register
00001D78  2607                    1321        MOVE.L      D7,D3             ;Moving return value to D3
00001D7A                          1322  
00001D7A  6100 02F0               1323        BSR         EA_PARSE_REGISTER ;parsing the count/register field
00001D7E  2A07                    1324        MOVE.L      D7,D5             ;moving result to D5
00001D80                          1325  
00001D80  BA7C 0001               1326        CMP.W       #%1,D5             ;if the i/r value is 1 display the data register
00001D84  10FC 0044               1327        MOVE.B      #'D',(A0)+
00001D88                          1328  
00001D88  BA7C 0000               1329        CMP.W       #%0,D5             ;if the i/r value is 0 display immediate data
00001D8C  10FC 0023               1330        MOVE.B      #'#',(A0)+
00001D90                          1331  
00001D90  10C5                    1332        MOVE.B      D5,(A0)+          ;pushing the register number or immediate data to the stack
00001D92                          1333  
00001D92  10FC 002C               1334        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001D96  10FC 0020               1335        MOVE.B      #' ',(A0)+
00001D9A                          1336   
00001D9A  6100 0440               1337        BSR         BitMask0to2       ;isloating source destination register
00001D9E  2607                    1338        MOVE.L      D7,D3             ;Moving return value to D3
00001DA0                          1339  
00001DA0  6100 013E               1340        BSR         EA_PARSE_Dn       ;displaying the destination data register
00001DA4                          1341  
00001DA4  4E75                    1342        RTS                           ;Returning to source
00001DA6                          1343  
00001DA6                          1344  *Input: D0 (input Line)
00001DA6                          1345  EA_LS_MEMORY                        ;Parsing EA for LSR/LSL function for memory shifts
00001DA6                          1346  
00001DA6  6100 0428               1347        BSR         BitMask3to5       ;isolating destination address mode
00001DAA  2407                    1348        MOVE.L      D7,D2             ;moving return value to D2
00001DAC                          1349  
00001DAC  6100 042E               1350        BSR         BitMask0to2       ;isloating source address register
00001DB0  2607                    1351        MOVE.L      D7,D3             ;Moving return value to D3
00001DB2                          1352  
00001DB2  B47C 0000               1353        CMP.W       #%000,D2          ;Data Register direct is not a valid EA mode
00001DB6  6700 0346               1354        BEQ         ERROR
00001DBA                          1355  
00001DBA  B47C 0001               1356        CMP.W       #%001,D2          ;Address Register direct is not a valid EA Mode
00001DBE  6700 033E               1357        BEQ         ERROR
00001DC2                          1358  
00001DC2  B47C 0007               1359        CMP.W       #%111,D2          ;Immediate Data is not a valid EA mode
00001DC6  6700 0316               1360        BEQ         EA_BlOCK_IMMEDIATE
00001DCA                          1361  
00001DCA  6100 00C8               1362        BSR         EA_PARSE_MODE     ;parsing mode and register for the source   
00001DCE                          1363  
00001DCE  4E75                    1364        RTS                           ;Returning to source
00001DD0                          1365  
00001DD0                          1366  *Input: D0 (input Line)
00001DD0                          1367  EA_AS_REGISTER                      ;Parsing EA for ASR/ASL function for register shifts
00001DD0                          1368  
00001DD0  6100 045C               1369        BSR         BitMask5to5
00001DD4  2A07                    1370        MOVE.L      D7,D5             ;storing i/r value in D5
00001DD6                          1371  
00001DD6  6100 03CC               1372        BSR         BitMask9to11      ;isloating source EA source register
00001DDA  2607                    1373        MOVE.L      D7,D3             ;Moving return value to D3
00001DDC                          1374  
00001DDC  6100 028E               1375        BSR         EA_PARSE_REGISTER ;parsing the count/register field
00001DE0  2A07                    1376        MOVE.L      D7,D5             ;moving result to D5
00001DE2                          1377  
00001DE2  BA7C 0001               1378        CMP.W       #%1,D5             ;if the i/r value is 1 display the data register
00001DE6  10FC 0044               1379        MOVE.B      #'D',(A0)+
00001DEA                          1380  
00001DEA  BA7C 0000               1381        CMP.W       #%0,D5             ;if the i/r value is 0 display immediate data
00001DEE  10FC 0023               1382        MOVE.B      #'#',(A0)+
00001DF2                          1383  
00001DF2  10C5                    1384        MOVE.B      D5,(A0)+          ;pushing the register number or immediate data to the stack
00001DF4                          1385  
00001DF4  10FC 002C               1386        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001DF8  10FC 0020               1387        MOVE.B      #' ',(A0)+
00001DFC                          1388   
00001DFC  6100 03DE               1389        BSR         BitMask0to2       ;isloating source destination register
00001E00  2607                    1390        MOVE.L      D7,D3             ;Moving return value to D3
00001E02                          1391  
00001E02  6100 00DC               1392        BSR         EA_PARSE_Dn       ;displaying the destination data register
00001E06                          1393  
00001E06  4E75                    1394        RTS                           ;Returning to source
00001E08                          1395  
00001E08                          1396  *Input: D0 (input Line)
00001E08                          1397  EA_AS_MEMORY                        ;Parsing EA for ASR/ASL function for memory shifts
00001E08                          1398  
00001E08  6100 03C6               1399        BSR         BitMask3to5       ;isolating destination address mode
00001E0C  2407                    1400        MOVE.L      D7,D2             ;moving return value to D2
00001E0E                          1401  
00001E0E  6100 03CC               1402        BSR         BitMask0to2       ;isloating source address register
00001E12  2607                    1403        MOVE.L      D7,D3             ;Moving return value to D3
00001E14                          1404  
00001E14  B47C 0000               1405        CMP.W       #%000,D2          ;Data Register direct is not a valid EA mode
00001E18  6700 02E4               1406        BEQ         ERROR
00001E1C                          1407  
00001E1C  B47C 0001               1408        CMP.W       #%001,D2          ;Address Register direct is not a valid EA Mode
00001E20  6700 02DC               1409        BEQ         ERROR
00001E24                          1410  
00001E24  B47C 0007               1411        CMP.W       #%111,D2          ;Immediate Data is not a valid EA mode
00001E28  6700 02B4               1412        BEQ         EA_BlOCK_IMMEDIATE
00001E2C                          1413  
00001E2C  6100 0066               1414        BSR         EA_PARSE_MODE     ;parsing mode and register for the source   
00001E30                          1415  
00001E30  4E75                    1416        RTS                           ;Returning to source
00001E32                          1417  
00001E32                          1418  
00001E32                          1419  *Input: D0 (input Line)
00001E32                          1420  EA_RO_REGISTER                      ;Parsing EA for ROR/ROL function for register shifts
00001E32                          1421  
00001E32  6100 03FA               1422        BSR         BitMask5to5
00001E36  2A07                    1423        MOVE.L      D7,D5             ;storing i/r value in D5
00001E38                          1424  
00001E38  6100 036A               1425        BSR         BitMask9to11      ;isloating source EA source register
00001E3C  2607                    1426        MOVE.L      D7,D3             ;Moving return value to D3
00001E3E                          1427  
00001E3E  6100 022C               1428        BSR         EA_PARSE_REGISTER ;parsing the count/register field
00001E42  2A07                    1429        MOVE.L      D7,D5             ;moving result to D5
00001E44                          1430  
00001E44  BA7C 0001               1431        CMP.W       #%1,D5             ;if the i/r value is 1 display the data register
00001E48  10FC 0044               1432        MOVE.B      #'D',(A0)+
00001E4C                          1433  
00001E4C  BA7C 0000               1434        CMP.W       #%0,D5             ;if the i/r value is 0 display immediate data
00001E50  10FC 0023               1435        MOVE.B      #'#',(A0)+
00001E54                          1436  
00001E54  30C5                    1437        MOVE.W      D5,(A0)+          ;pushing the register number or immediate data to the stack
00001E56                          1438  
00001E56  10FC 002C               1439        MOVE.B      #',',(A0)+        ;pushing ", " to the stack.
00001E5A  10FC 0020               1440        MOVE.B      #' ',(A0)+
00001E5E                          1441   
00001E5E  6100 037C               1442        BSR         BitMask0to2       ;isloating source destination register
00001E62  2607                    1443        MOVE.L      D7,D3             ;Moving return value to D3
00001E64                          1444  
00001E64  6100 007A               1445        BSR         EA_PARSE_Dn       ;displaying the destination data register
00001E68                          1446  
00001E68  4E75                    1447        RTS                           ;Returning to source
00001E6A                          1448  
00001E6A                          1449  *Input: D0 (input Line)
00001E6A                          1450  EA_RO_MEMORY                        ;Parsing EA for ROR/ROL function for memory shifts
00001E6A                          1451  
00001E6A  6100 0364               1452        BSR         BitMask3to5       ;isolating destination address mode
00001E6E  2407                    1453        MOVE.L      D7,D2             ;moving return value to D2
00001E70                          1454  
00001E70  6100 036A               1455        BSR         BitMask0to2       ;isloating source address register
00001E74  2607                    1456        MOVE.L      D7,D3             ;Moving return value to D3
00001E76                          1457  
00001E76  B47C 0000               1458        CMP.W       #%000,D2          ;Data Register direct is not a valid EA mode
00001E7A  6700 0282               1459        BEQ         ERROR
00001E7E                          1460  
00001E7E  B47C 0001               1461        CMP.W       #%001,D2          ;Address Register direct is not a valid EA Mode
00001E82  6700 027A               1462        BEQ         ERROR
00001E86                          1463  
00001E86  B47C 0007               1464        CMP.W       #%111,D2          ;Immediate Data is not a valid EA mode
00001E8A  6700 0252               1465        BEQ         EA_BlOCK_IMMEDIATE
00001E8E                          1466  
00001E8E  6100 0004               1467        BSR         EA_PARSE_MODE     ;parsing mode and register for the source   
00001E92                          1468  
00001E92  4E75                    1469        RTS                           ;Returning to source
00001E94                          1470  
00001E94                          1471  
00001E94                          1472  *Finds correct function to parse the EA Mode 
00001E94                          1473  *Input: D2 (EA Mode)
00001E94                          1474  *Input: D3 (EA Register Number)
00001E94                          1475  EA_PARSE_MODE                       
00001E94  B47C 0000               1476        CMP.W       #%000,D2
00001E98  6700 0046               1477        BEQ         EA_PARSE_Dn
00001E9C                          1478  
00001E9C  B47C 0001               1479        CMP.W       #%001,D2
00001EA0  6700 004A               1480        BEQ         EA_PARSE_An
00001EA4                          1481  
00001EA4  B47C 0002               1482        CMP.W       #%010,D2
00001EA8  6700 004E               1483        BEQ         EA_PARSE_INDIRECT_An
00001EAC                          1484  
00001EAC  B47C 0003               1485        CMP.W       #%011,D2
00001EB0  6700 005A               1486        BEQ         EA_PARSE_INDIRECT_INCREMENT_An
00001EB4                          1487  
00001EB4  B47C 0004               1488        CMP.W       #%100,D2
00001EB8  6700 006A               1489        BEQ         EA_PARSE_INDIRECT_DECREMENT_An
00001EBC                          1490  
00001EBC  B47C 0007               1491        CMP.W       #%111,D2
00001EC0  6700 0004               1492        BEQ         EA_ADDITIONAL_DATA
00001EC4                          1493  
00001EC4  4E75                    1494        RTS
00001EC6                          1495  
00001EC6                          1496  EA_ADDITIONAL_DATA
00001EC6  B67C 0000               1497        CMP.W       #%000,D3
00001ECA  6700 008C               1498        BEQ         EA_PARSE_ABSOLUTE_WORD_ADDRESS
00001ECE                          1499  
00001ECE  B67C 0001               1500        CMP.W       #%001,D3
00001ED2  6700 0072               1501        BEQ         EA_PARSE_ABSOLUTE_LONG_ADDRESS
00001ED6                          1502  
00001ED6  B67C 0004               1503        CMP.W       #%100,D3
00001EDA  6700 0060               1504        BEQ         EA_PARSE_IMMEDIATE_DATA
00001EDE                          1505  
00001EDE  4E75                    1506        RTS
00001EE0                          1507  
00001EE0                          1508  *These functions are called when the EA Mode matches.
00001EE0                          1509  *They store the human ouput code to the A0 register, then increment it.
00001EE0                          1510  *Then return to where they were called from.
00001EE0                          1511  
00001EE0                          1512  
00001EE0                          1513  *Input: D3 (Register Address number)
00001EE0                          1514  *Uses:  D7
00001EE0                          1515  *Output: A0
00001EE0                          1516  EA_PARSE_Dn
00001EE0  6100 018A               1517        BSR         EA_PARSE_REGISTER
00001EE4  10FC 0044               1518        MOVE.B      #'D',(A0)+
00001EE8  10C7                    1519        MOVE.B      D7,(A0)+
00001EEA  4E75                    1520        RTS
00001EEC                          1521  
00001EEC                          1522  EA_PARSE_An
00001EEC  6100 017E               1523        BSR         EA_PARSE_REGISTER
00001EF0  10FC 0041               1524        MOVE.B      #'A',(A0)+
00001EF4  10C7                    1525        MOVE.B      D7,(A0)+
00001EF6  4E75                    1526        RTS
00001EF8                          1527  
00001EF8                          1528  EA_PARSE_INDIRECT_An
00001EF8  6100 0172               1529        BSR         EA_PARSE_REGISTER
00001EFC  10FC 0028               1530        MOVE.B      #'(',(A0)+
00001F00  10FC 0041               1531        MOVE.B      #'A',(A0)+
00001F04  10C7                    1532        MOVE.B      D7,(A0)+
00001F06  10FC 0029               1533        MOVE.B      #')',(A0)+
00001F0A  4E75                    1534        RTS
00001F0C                          1535  
00001F0C                          1536  EA_PARSE_INDIRECT_INCREMENT_An
00001F0C  6100 015E               1537        BSR         EA_PARSE_REGISTER
00001F10  10FC 0028               1538        MOVE.B      #'(',(A0)+
00001F14  10FC 0041               1539        MOVE.B      #'A',(A0)+
00001F18  10C7                    1540        MOVE.B      D7,(A0)+
00001F1A  10FC 0029               1541        MOVE.B      #')',(A0)+
00001F1E  10FC 002B               1542        MOVE.B      #'+',(A0)+
00001F22  4E75                    1543        RTS
00001F24                          1544  
00001F24                          1545  EA_PARSE_INDIRECT_DECREMENT_An
00001F24  6100 0146               1546        BSR         EA_PARSE_REGISTER
00001F28  10FC 002D               1547        MOVE.B      #'-',(A0)+
00001F2C  10FC 0028               1548        MOVE.B      #'(',(A0)+
00001F30  10FC 0041               1549        MOVE.B      #'A',(A0)+
00001F34  10C7                    1550        MOVE.B      D7,(A0)+
00001F36  10FC 0029               1551        MOVE.B      #')',(A0)+
00001F3A  4E75                    1552        RTS
00001F3C                          1553  
00001F3C                          1554  EA_PARSE_IMMEDIATE_DATA
00001F3C  10FC 0023               1555        MOVE.B     #'#',(A0)+
00001F40  6100 0028               1556        BSR        IO_GET_WORD
00001F44  4E75                    1557        RTS
00001F46                          1558  
00001F46                          1559  EA_PARSE_ABSOLUTE_LONG_ADDRESS
00001F46  10FC 0024               1560        MOVE.B     #'$',(A0)+
00001F4A  6100 001E               1561        BSR        IO_GET_WORD
00001F4E  10FC 002E               1562        MOVE.B     #'.',(A0)+
00001F52  10FC 004C               1563        MOVE.B     #'L',(A0)+
00001F56  4E75                    1564        RTS
00001F58                          1565        
00001F58                          1566  EA_PARSE_ABSOLUTE_WORD_ADDRESS
00001F58  10FC 0024               1567        MOVE.B     #'$',(A0)+
00001F5C  6100 000C               1568        BSR        IO_GET_WORD
00001F60  10FC 002E               1569        MOVE.B     #'.',(A0)+
00001F64  10FC 0057               1570        MOVE.B     #'W',(A0)+
00001F68  4E75                    1571        RTS
00001F6A                          1572  
00001F6A                          1573  
00001F6A                          1574  IO_GET_WORD
00001F6A  3415                    1575        MOVE.W  (A5),D2         *Gets the data of where the pointer is at
00001F6C  544D                    1576        ADDQ.W  #byte,A5        *Incrementing the pointer one word
00001F6E  6100 0004               1577        BSR     n2asciiSTACK    *Branching to n2asciiSTACK to push the word to the stack
00001F72  4E75                    1578        RTS
00001F74                          1579  
00001F74                          1580  
00001F74                          1581  *Modified version of the n2ascii function that pushes to the A0 stack instead of outputting to console
00001F74  183C 000C               1582  n2asciiSTACK      MOVE.B  #12,D4          *Sets up D4 as counter.
00001F78  3602                    1583  n2asciiSTACK2     MOVE.W  D2,D3           *Moves to D3 to work on there 
00001F7A  E86B                    1584                    LSR.W   D4,D3           
00001F7C  0243 000F               1585                    ANDI.W  #$000F,D3       *Masks to check last nibble
00001F80  B63C 0000               1586                    CMP.B   #$0,D3          *checks if D3 is equal to 0
00001F84  6700 0086               1587                    BEQ     push0
00001F88  B63C 0001               1588                    CMP.B   #$1,D3          *checks if D3 is equal to 1
00001F8C  6700 0084               1589                    BEQ     push1
00001F90  B63C 0002               1590                    CMP.B   #$2,D3          *checks if D3 is equal to 2
00001F94  6700 0082               1591                    BEQ     push2
00001F98  B63C 0003               1592                    CMP.B   #$3,D3          *checks if D3 is equal to 3
00001F9C  6700 0080               1593                    BEQ     push3
00001FA0  B63C 0004               1594                    CMP.B   #$4,D3          *checks if D3 is equal to 4
00001FA4  6700 007E               1595                    BEQ     push4
00001FA8  B63C 0005               1596                    CMP.B   #$5,D3          *checks if D3 is equal to 5
00001FAC  6700 007C               1597                    BEQ     push5
00001FB0  B63C 0006               1598                    CMP.B   #$6,D3          *checks if D3 is equal to 6
00001FB4  6700 007A               1599                    BEQ     push6
00001FB8  B63C 0007               1600                    CMP.B   #$7,D3          *checks if D3 is equal to 7
00001FBC  6700 0078               1601                    BEQ     push7
00001FC0  B63C 0008               1602                    CMP.B   #$8,D3          *checks if D3 is equal to 8
00001FC4  6700 0076               1603                    BEQ     push8
00001FC8  B63C 0009               1604                    CMP.B   #$9,D3          *checks if D3 is equal to 9
00001FCC  6700 0074               1605                    BEQ     push9
00001FD0  B63C 000A               1606                    CMP.B   #$A,D3          *checks if D3 is equal to A
00001FD4  6700 0072               1607                    BEQ     pushA
00001FD8  B63C 000B               1608                    CMP.B   #$B,D3          *checks if D3 is equal to B
00001FDC  6700 0070               1609                    BEQ     pushB
00001FE0  B63C 000C               1610                    CMP.B   #$C,D3          *checks if D3 is equal to C
00001FE4  6700 006E               1611                    BEQ     pushC
00001FE8  B63C 000D               1612                    CMP.B   #$D,D3          *checks if D3 is equal to D
00001FEC  6700 006C               1613                    BEQ     pushD
00001FF0  B63C 000E               1614                    CMP.B   #$E,D3          *checks if D3 is equal to E
00001FF4  6700 006A               1615                    BEQ     pushE
00001FF8  B63C 000F               1616                    CMP.B   #$F,D3          *Checks if D3 is equal to F
00001FFC  6700 0068               1617                    BEQ     pushF
00002000  5904                    1618  n2acheckSTACK     SUB.B   #4,D4           *Decrements our counter
00002002  B83C 0000               1619                    CMP.B   #0,D4           *Checks if counter reached 0
00002006  6C00 FF70               1620                    BGE     n2asciiSTACK2   *Returns to top of loop to continue        
0000200A  4E75                    1621                    RTS                     *Else return to caller
0000200C                          1622  
0000200C  10FC 0030               1623  push0       MOVE.B  #'0',(A0)+
00002010  4E75                    1624              RTS
00002012  10FC 0031               1625  push1       MOVE.B  #'1',(A0)+
00002016  4E75                    1626              RTS
00002018  10FC 0032               1627  push2       MOVE.B  #'2',(A0)+
0000201C  4E75                    1628              RTS
0000201E  10FC 0033               1629  push3       MOVE.B  #'3',(A0)+
00002022  4E75                    1630              RTS
00002024  10FC 0034               1631  push4       MOVE.B  #'4',(A0)+
00002028  4E75                    1632              RTS
0000202A  10FC 0035               1633  push5       MOVE.B  #'5',(A0)+
0000202E  4E75                    1634              RTS
00002030  10FC 0036               1635  push6       MOVE.B  #'6',(A0)+
00002034  4E75                    1636              RTS
00002036  10FC 0037               1637  push7       MOVE.B  #'7',(A0)+
0000203A  4E75                    1638              RTS
0000203C  10FC 0038               1639  push8       MOVE.B  #'8',(A0)+
00002040  4E75                    1640              RTS
00002042  10FC 0039               1641  push9       MOVE.B  #'9',(A0)+
00002046  4E75                    1642              RTS
00002048  10FC 0041               1643  pushA       MOVE.B  #'A',(A0)+
0000204C  4E75                    1644              RTS
0000204E  10FC 0042               1645  pushB       MOVE.B  #'B',(A0)+
00002052  4E75                    1646              RTS
00002054  10FC 0043               1647  pushC       MOVE.B  #'C',(A0)+
00002058  4E75                    1648              RTS
0000205A  10FC 0044               1649  pushD       MOVE.B  #'D',(A0)+
0000205E  4E75                    1650              RTS
00002060  10FC 0045               1651  pushE       MOVE.B  #'E',(A0)+
00002064  4E75                    1652              RTS         
00002066  10FC 0046               1653  pushF       MOVE.B  #'F',(A0)+
0000206A  4E75                    1654              RTS
0000206C                          1655  
0000206C                          1656  *Converts a register number to ascii number and stores to D7 
0000206C                          1657  *Input:  D3 (Register Number)
0000206C                          1658  *Output: D7 
0000206C                          1659  EA_PARSE_REGISTER                   
0000206C                          1660  
0000206C  B67C 0000               1661        CMP.W       #%000,D3
00002070  6700 003C               1662        BEQ         EA_MOVE0
00002074                          1663  
00002074  B67C 0001               1664        CMP.W       #%001,D3
00002078  6700 003A               1665        BEQ         EA_MOVE1
0000207C                          1666  
0000207C  B67C 0002               1667        CMP.W       #%010,D3
00002080  6700 0038               1668        BEQ         EA_MOVE2
00002084                          1669  
00002084  B67C 0003               1670        CMP.W       #%011,D3
00002088  6700 0036               1671        BEQ         EA_MOVE3
0000208C                          1672  
0000208C  B67C 0004               1673        CMP.W       #%100,D3
00002090  6700 0034               1674        BEQ         EA_MOVE4
00002094                          1675  
00002094  B67C 0005               1676        CMP.W       #%101,D3
00002098  6700 0032               1677        BEQ         EA_MOVE5
0000209C                          1678  
0000209C  B67C 0006               1679        CMP.W       #%110,D3
000020A0  6700 0030               1680        BEQ         EA_MOVE6
000020A4                          1681  
000020A4  B67C 0007               1682        CMP.W       #%111,D3
000020A8  6700 002E               1683        BEQ         EA_MOVE7
000020AC                          1684  
000020AC  4E75                    1685        RTS
000020AE                          1686  
000020AE  3E3C 0030               1687  EA_MOVE0    MOVE.W      #'0',D7
000020B2  4E75                    1688              RTS
000020B4                          1689  
000020B4  3E3C 0031               1690  EA_MOVE1    MOVE.W      #'1',D7
000020B8  4E75                    1691              RTS
000020BA                          1692  
000020BA  3E3C 0032               1693  EA_MOVE2    MOVE.W      #'2',D7
000020BE  4E75                    1694              RTS
000020C0                          1695  
000020C0  3E3C 0033               1696  EA_MOVE3    MOVE.W      #'3',D7
000020C4  4E75                    1697              RTS
000020C6                          1698  
000020C6  3E3C 0034               1699  EA_MOVE4    MOVE.W      #'4',D7
000020CA  4E75                    1700              RTS
000020CC                          1701  
000020CC  3E3C 0035               1702  EA_MOVE5    MOVE.W      #'5',D7
000020D0  4E75                    1703              RTS
000020D2                          1704  
000020D2  3E3C 0036               1705  EA_MOVE6    MOVE.W      #'6',D7
000020D6  4E75                    1706              RTS
000020D8                          1707  
000020D8  3E3C 0037               1708  EA_MOVE7    MOVE.W      #'7',D7
000020DC  4E75                    1709              RTS
000020DE                          1710  
000020DE                          1711  EA_BlOCK_IMMEDIATE                  ;Blocks immediate data when it not a valid EA mode
000020DE  B67C 0002               1712        CMP.W       #%010,D3          ;Branches to ERROR if the EA mode is immediate dat
000020E2  6700 001A               1713        BEQ         ERROR
000020E6                          1714  
000020E6  4E75                    1715        RTS                           ;If it's not immediate it will just return back
000020E8                          1716  
000020E8                          1717  IO_PRINT_OUTPUT
000020E8  10FC 0000               1718        MOVE.B    #%0,(A0)+           ;Adding terminating null to end of string
000020EC  41F9 0000A000           1719        LEA       OUTPUT_START,A0     ;Reseting A0 back to start of string
000020F2  2248                    1720        MOVEA.L   A0,A1               ;Moving to A1 for printing
000020F4  4280                    1721        CLR.L     D0                  ;clearing the trap byte
000020F6  103C 000D               1722        MOVE.B    #13,D0              ;printing string with new line
000020FA  4E4F                    1723        TRAP      #15
000020FC  4E75                    1724        RTS
000020FE                          1725  
000020FE                          1726  ERROR
000020FE                          1727        *TODO: handle illegal inputs
000020FE                          1728  
000020FE                          1729  end_search
000020FE                          1730  
000020FE                          1731      
000020FE                          1732  
000020FE  FFFF FFFF               1733      SIMHALT             ; halt simulator
00002102                          1734  
00002102                          1735  * Put variables and constants here
00002102                          1736  
00002102= 20                      1737  space       DC.B    $20         *space
00002103  =0000000D               1738  CR          EQU     $0D         *Carriage return
00002103  =0000000A               1739  LF          EQU     $0A         *Line Feed
00002103= 0D 0A 00                1740  newline     DC.B    CR,LF,0     *New Line
00002106  =00000002               1741  byte        EQU     2           *How much to move the search address.
00002106                          1742                                  *2 bytes because we're searching for a word
00002106  =00001000               1743  cur_address EQU     $00001000   *Start of search
00002106  =00001010               1744  test_end    EQU     $00001010   *End of search
00002106                          1745  mydata      REG     D0-D7/A0-A6  *Used for pushing registers to stack
00002106                          1746  
00002106                          1747  *Strings for I/O
00002106= 44 41 54 41 20 00       1748  datastring  DC.B    'DATA ',0   *Data string
0000210C= 4E 4F 50 00             1749  NOPstring   DC.B    'NOP',0     *NOP string
00002110= 45 4F 52 00             1750  EORstring   DC.B    'EOR',0     *EOR string
00002114= 4F 52 49 00             1751  ORIstring   DC.B    'ORI',0     *ORI string
00002118= 4F 52 00                1752  ORstring    DC.B    'OR',0      *OR string
0000211B= 41 44 44 00             1753  ADDstring   DC.B    'ADD',0     *ADD string
0000211F= 41 44 44 41 00          1754  ADDAstring  DC.B    'ADDA',0     *ADDA string
00002124= 4D 4F 56 45 4D 00       1755  MOVEMstring DC.B    'MOVEM',0   *MOVEM string
0000212A= 4D 4F 56 45 41 00       1756  MOVEAstring DC.B    'MOVEA',0   *MOVEA string
00002130= 4D 4F 56 45 00          1757  MOVEstring  DC.B    'MOVE',0    *MOVE string
00002135= 53 55 42 00             1758  SUBstring   DC.B    'SUB',0     *SUB string
00002139= 53 55 42 00             1759  SUBQstring  DC.B    'SUB',0     *SUBQ string
0000213D= 4D 55 4C 53 00          1760  MULSstring  DC.B    'MULS',0    *MULS string
00002142= 44 49 56 53 00          1761  DIVSstring  DC.B    'DIVS',0    *DIVS string
00002147= 43 4D 50 00             1762  CMPstring   DC.B    'CMP',0     *CMP string
0000214B= 43 4D 50 49 00          1763  CMPIstring  DC.B    'CMPI',0    *CMPI string
00002150= 4C 53 4C 00             1764  LSLstring   DC.B    'LSL',0     *LSL string
00002154= 4C 53 52 00             1765  LSRstring   DC.B    'LSR',0     *LSR string
00002158= 41 53 4C 00             1766  ASLstring   DC.B    'ASL',0     *ASL string
0000215C= 41 53 52 00             1767  ASRstring   DC.B    'ASR',0     *ASR string
00002160= 52 4F 4C 00             1768  ROLstring   DC.B    'ROL',0     *ROL string
00002164= 52 4F 52 00             1769  RORstring   DC.B    'ROR',0     *ROR string
00002168= 42 43 4C 52 00          1770  BCLRstring  DC.B    'BCLR',0    *BCLR string
0000216D= 42 43 53 00             1771  BCSstring   DC.B    'BCS',0     *BCS string
00002171= 42 47 45 00             1772  BGEstring   DC.B    'BGE',0     *BGE string
00002175= 42 4C 54 00             1773  BLTstring   DC.B    'BLT',0     *BLT string
00002179= 42 56 43 00             1774  BVCstring   DC.B    'BVC',0     *BVC string
0000217D= 42 52 41 00             1775  BRAstring   DC.B    'BRA',0     *BRA string
00002181= 4A 53 52 00             1776  JSRstring   DC.B    'JSR',0     *JSR string
00002185= 52 54 53 00             1777  RTSstring   DC.B    'RTS',0     *RTS string
00002189= 4E 45 47 20 00          1778  NEGstring   DC.B    'NEG ',0     *NEG string
0000218E= 4C 45 41 20 00          1779  LEAstring   DC.B    'LEA ',0    *LEA string
00002193                          1780  
00002193                          1781  
00002193                          1782  
00002193                          1783  *Bit Masks
00002193                          1784  
00002193  =0000F000               1785  BitMask15to12 EQU   $F000       *Mask for first byte
00002193  =00008BC0               1786  BitMaskMulDivl EQU  %1000101111000000  *Mask for MULS and DIVS Long
00002193  =0000FFC0               1787  BitMask15to6 EQU    $FFC0       *Mask for showing bits 15 through 6 (BCLR immidiate)
00002193  =0000FF80               1788  BitMask15to7 EQU    $FF80       *Mask for showing bits 15 through 7 (MOVEM)
00002193  =0000FF00               1789  BitMask15to8 EQU    $FF00       *Mask for showing first two bytes, 0'ing last 2
00002193  =0000F1C0               1790  opMask      EQU     $F1C0       *Masks word so first byte and OP mode are visible
00002193                          1791                                  *The rest of the word are 0's
00002193  =0000F118               1792  BitMaskShifts EQU   %1111000100011000   *Masks for the shift op codes
00002193                          1793  
00002193                          1794  *Masked Op codes
00002193  =00004E71               1795  nop_code    EQU     $4E71       *Hex for NOP
00002193  =0000B100               1796  eorb_code   EQU     %1011000100000000   *Binary of EOR.B, masked
00002193  =0000B140               1797  eorw_code   EQU     %1011000101000000   *Binary of EOR.W, masked
00002193  =0000B180               1798  eorl_code   EQU     %1011000110000000   *Binary of EOR.L, masked
00002193  =00000000               1799  ori_code    EQU     $00               *Hex of first two bytes of ORI
00002193                          1800                                          *last 2 bytes don't matter for compare
00002193  =00008000               1801  orbDn_code  EQU     %1000000000000000   *Binary of OR.B -> Dn
00002193  =00008040               1802  orwDn_code  EQU     %1000000001000000   *Binary of OR.W -> Dn
00002193  =00008080               1803  orlDn_code  EQU     %1000000010000000   *Binary of OR.L -> Dn
00002193  =00008100               1804  orbEA_code  EQU     %1000000100000000   *Binary of OR.B -> EA
00002193  =00008140               1805  orwEA_code  EQU     %1000000101000000   *Binary of OR.W -> EA
00002193  =00008180               1806  orlEA_code  EQU     %1000000110000000   *Binary of OR.L -> EA
00002193  =0000D000               1807  addbDn_code EQU     %1101000000000000   *Binary of ADD.B -> Dn
00002193  =0000D040               1808  addwDn_code EQU     %1101000001000000   *Binary of ADD.W -> Dn
00002193  =0000D080               1809  addlDn_code EQU     %1101000010000000   *Binary of ADD.L -> Dn
00002193  =0000D100               1810  addbEA_code EQU     %1101000100000000   *Binary of ADD.B -> EA
00002193  =0000D140               1811  addwEA_code EQU     %1101000101000000   *Binary of ADD.W -> EA
00002193  =0000D180               1812  addlEA_code EQU     %1101000110000000   *Binary of ADD.L -> EA
00002193  =0000D0C0               1813  addaw_code  EQU     %1101000011000000   *Binary of ADDA.W
00002193  =0000D1C0               1814  addal_code  EQU     %1101000111000000   *Binary of ADDA.L
00002193  =00004880               1815  movemr2m_code EQU   %0100100010000000   *Binary of MOVEM from register to memory
00002193  =00004C80               1816  movemm2r_code EQU   %0100110010000000   *Binary of MOVEM from memory to register
00002193  =00003040               1817  moveaw_code EQU     %0011000001000000   *Binary of MOVEA Word
00002193  =00002040               1818  moveal_code EQU     %0010000001000000   *Binary of MOVEA long
00002193  =00001000               1819  moveb_code  EQU     %0001000000000000   *Binary of MOVE byte
00002193  =00003000               1820  movew_code  EQU     %0011000000000000   *Binary of MOVE word
00002193  =00002000               1821  movel_code  EQU     %0010000000000000   *Binary of Move long
00002193  =00009000               1822  subbDn_code EQU     %1001000000000000   *Binary of SUB.B -> Dn
00002193  =00009040               1823  subwDn_code EQU     %1001000001000000   *Binary of SUB.W -> Dn
00002193  =00009080               1824  sublDn_code EQU     %1001000010000000   *Binary of SUB.L -> Dn
00002193  =00009100               1825  subbEA_code EQU     %1001000100000000   *Binary of SUB.B -> EA
00002193  =00009140               1826  subwEA_code EQU     %1001000101000000   *Binary of SUB.W -> EA
00002193  =00009180               1827  sublEA_code EQU     %1001000110000000   *Binary of SUB.L -> EA
00002193  =00005100               1828  subqb_code  EQU     %0101000100000000   *Binary of SUBQ byte
00002193  =00005140               1829  subqw_code  EQU     %0101000101000000   *Binary of SUBQ word
00002193  =00005180               1830  subql_code  EQU     %0101000110000000   *Binary of SUBQ long
00002193  =00000800               1831  mulsl_code  EQU     %0000100000000000   *Binary of MULS.L
00002193  =00000840               1832  divsl_code  EQU     %0000100001000000   *Binary of DIVS.L
00002193  =0000C1C0               1833  mulsw_code  EQU     %1100000111000000   *Binary of MULS.W
00002193  =000081C0               1834  divsw_code  EQU     %1000000111000000   *Binary of DIVS.W
00002193  =0000B000               1835  cmpb_code   EQU     %1011000000000000   *Binary of CMP.B
00002193  =0000B040               1836  cmpw_code   EQU     %1011000001000000   *Binary of CMP.W
00002193  =0000B080               1837  cmpl_code   EQU     %1011000010000000   *Binary of CMP.L
00002193  =00000C00               1838  cmpi_code   EQU     %0000110000000000   *Binary of CMPI
00002193  =0000E108               1839  lsl_code    EQU     %1110000100001000   *Binary of LSL
00002193  =0000E008               1840  lsr_code    EQU     %1110000000001000   *Binary of LSR
00002193  =0000E100               1841  asl_code    EQU     %1110000100000000   *Binary of ASL
00002193  =0000E000               1842  asr_code    EQU     %1110000000000000   *Binary of ASR
00002193  =0000E118               1843  rol_code    EQU     %1110000100011000   *Binary of ROL
00002193  =0000E018               1844  ror_code    EQU     %1110000000011000   *Binary of ROR
00002193  =00000880               1845  bclri_code  EQU     %0000100010000000   *Binary of BCLR with an immidiate
00002193  =00000180               1846  bclr_code   EQU     %0000000110000000   *Binary of BCLR
00002193  =00006500               1847  bcs_code    EQU     %0110010100000000   *Binary of BCS
00002193  =00006C00               1848  bge_code    EQU     %0110110000000000   *Binary of BGE
00002193  =00006D00               1849  blt_code    EQU     %0110110100000000   *Binary of BLT
00002193  =00006800               1850  bvc_code    EQU     %0110100000000000   *Binary of BVC
00002193  =00006000               1851  bra_code    EQU     %0110000000000000   *Binary of BRA
00002193  =00004E80               1852  jsr_code    EQU     %0100111010000000   *Binary of JSR
00002193  =00004E75               1853  rts_code    EQU     %0100111001110101   *Binary of RTS
00002193  =00004400               1854  neg_code    EQU     %0100010000000000   *Binary of NEG
00002193  =000041C0               1855  lea_code    EQU     %0100000111000000   *Binary of LEA
00002193                          1856  *EA EQU's
00002193                          1857  
00002193  =0000A000               1858  OUTPUT_START EQU     $0000A000
00002193                          1859  
00002193                          1860  *--------------------------------*
00002193                          1861  *     Written By: Zeke Snider    *
00002193                          1862  *     CSS 422                    *
00002193                          1863  *     Fall 2014                  *
00002193                          1864  *     EA BitMasks                *
00002193                          1865  *--------------------------------*
00002193                          1866  
00002193                          1867  *D6 is used to store the masks. 
00002193                          1868  *D0 is assumed to be input line
00002193                          1869  *Data is returned on D7
00002193                          1870  
00002193                          1871  *(These variables are flexible and can be changed later)
00002193                          1872  
00002193                          1873  
00002193                          1874  *-----COMMON USE MASKS-----*
00002193                          1875  
00002193                          1876  *12-15 often used for OP codes
00002193                          1877  BitMask12to15 
00002194  2C3C 0000F000           1878        MOVE.L   #%1111000000000000,D6       ;Storing the mask to D6
0000219A  2E00                    1879        MOVE.L   D0,D7                      ;Copying the input line to D7
0000219C  CE86                    1880        AND.L    D6,D7                      ;ANDING the Data
0000219E  E04F                    1881        LSR      #8,D7                      ;Shifting the irrelavant bits out the right side
000021A0  E84F                    1882        LSR      #4,D7
000021A2  4E75                    1883        RTS
000021A4                          1884  
000021A4                          1885  *9-11 commonly used for register
000021A4                          1886  BitMask9to11 
000021A4  2C3C 00000E00           1887        MOVE.L   #%0000111000000000,D6       ;Storing the mask to D6
000021AA  2E00                    1888        MOVE.L   D0,D7                      ;Copying the input line to D7
000021AC  CE86                    1889        AND.L    D6,D7                      ;ANDING the Data
000021AE  E04F                    1890        LSR      #8,D7                      ;Shifting the irrelavant bits out the right side
000021B0  E24F                    1891        LSR      #1,D7 
000021B2  4E75                    1892        RTS
000021B4                          1893  
000021B4                          1894  
000021B4                          1895  *6-8 commonly used for OPMode, OP code
000021B4                          1896  BitMask6to8 
000021B4  2C3C 000001C0           1897        MOVE.L   #%0000000111000000,D6       ;Storing the mask to D6
000021BA  2E00                    1898        MOVE.L   D0,D7                      ;Copying the input line to D7
000021BC  CE86                    1899        AND.L    D6,D7                      ;ANDING the Data
000021BE  EC4F                    1900        LSR      #6,D7                      ;Shifting the irrelavant bits out the right side
000021C0  4E75                    1901        RTS
000021C2                          1902  
000021C2                          1903  *6-7 commonly used for size codes
000021C2                          1904  BitMask6to7 
000021C2  2C3C 000000C0           1905        MOVE.L   #%0000000011000000,D6       ;Storing the mask to D6
000021C8  2E00                    1906        MOVE.L   D0,D7                      ;Copying the input line to D7
000021CA  CE86                    1907        AND.L    D6,D7                      ;ANDING the Data
000021CC  EC4F                    1908        LSR      #6,D7                      ;Shifting the irrelavant bits out the right side
000021CE  4E75                    1909        RTS
000021D0                          1910  
000021D0                          1911  *3-5 commonly used for EA Mode
000021D0                          1912  BitMask3to5 
000021D0  3C3C 0038               1913        MOVE.W   #%0000000000111000,D6       ;Storing the mask to D6
000021D4  2E00                    1914        MOVE.L   D0,D7                      ;Copying the input line to D7
000021D6  CE86                    1915        AND.L    D6,D7                      ;ANDING the Data
000021D8  E64F                    1916        LSR      #3,D7                      ;Shifting the irrelavant bits out the right side
000021DA  4E75                    1917        RTS
000021DC                          1918  
000021DC                          1919  *0-2 commonly used for EA Register
000021DC                          1920  BitMask0to2 
000021DC  3C3C 0007               1921        MOVE.W   #%0000000000000111,D6       ;Storing the mask to D6
000021E0  2E00                    1922        MOVE.L   D0,D7                      ;Copying the input line to D7
000021E2  CE86                    1923        AND.L    D6,D7                      ;ANDING the Data
000021E4  4E75                    1924        RTS
000021E6                          1925  
000021E6                          1926  *-----SPECIFIC USE MASKS----*
000021E6                          1927  
000021E6                          1928  *14-15 used for MOVE OP code
000021E6                          1929  BitMask14to15 
000021E6  2C3C 0000C000           1930        MOVE.L   #%1100000000000000,D6       ;Storing the mask to D6
000021EC  2E00                    1931        MOVE.L   D0,D7                      ;Copying the input line to D7
000021EE  CE86                    1932        AND.L    D6,D7                      ;ANDING the Data
000021F0  E04F                    1933        LSR      #8,D7                     ;Shifting the irrelavant bits out the right side
000021F2  EC4F                    1934        LSR      #6,D7
000021F4  4E75                    1935        RTS
000021F6                          1936  
000021F6                          1937  *12-13 used for MOVE size code
000021F6                          1938  BitMask12to13 
000021F6  2C3C 00003000           1939        MOVE.L   #%0011000000000000,D6       ;Storing the mask to D6
000021FC  2E00                    1940        MOVE.L   D0,D7                      ;Copying the input line to D7
000021FE  CE86                    1941        AND.L    D6,D7                      ;ANDING the Data
00002200  E04F                    1942        LSR      #8,D7                      ;Shifting the irrelavant bits out the right side
00002202  E84F                    1943        LSR      #4,D7
00002204  4E75                    1944        RTS
00002206                          1945  
00002206                          1946  *8-15 used for ORI OP Code
00002206                          1947  BitMask8to15 
00002206  2C3C 0000FF00           1948        MOVE.L   #%1111111100000000,D6       ;Storing the mask to D6
0000220C  2E00                    1949        MOVE.L   D0,D7                      ;Copying the input line to D7
0000220E  CE86                    1950        AND.L    D6,D7                      ;ANDING the Data
00002210  E04F                    1951        LSR      #8,D7                      ;Shifting the irrelavant bits out the right side
00002212  4E75                    1952        RTS
00002214                          1953  
00002214                          1954  *7-15 used for MOVEM OP Code
00002214                          1955  BitMask7to15 
00002214  2C3C 0000FF80           1956        MOVE.L   #%1111111110000000,D6       ;Storing the mask to D6
0000221A  2E00                    1957        MOVE.L   D0,D7                      ;Copying the input line to D7
0000221C  CE86                    1958        AND.L    D6,D7                      ;ANDING the Data
0000221E  EE4F                    1959        LSR      #7,D7                      ;Shifting the irrelavant bits out the right side
00002220  4E75                    1960        RTS
00002222                          1961  
00002222                          1962  *8,12-15 SUBQ OP Code
00002222                          1963  BitMaskSubQ 
00002222  2C3C 0000F100           1964        MOVE.L   #%1111000100000000,D6       ;Storing the mask to D6
00002228  2E00                    1965        MOVE.L   D0,D7                      ;Copying the input line to D7
0000222A  CE86                    1966        AND.L    D6,D7                      ;ANDING the Data
0000222C  4E75                    1967        RTS
0000222E                          1968  
0000222E                          1969  
0000222E                          1970  *5 used for LSR/LSL i/r
0000222E                          1971  BitMask5to5 
0000222E  7C20                    1972        MOVE.L   #%0000000000100000,D6       ;Storing the mask to D6
00002230  2E00                    1973        MOVE.L   D0,D7                      ;Copying the input line to D7
00002232  CE86                    1974        AND.L    D6,D7                      ;ANDING the Data
00002234  E64F                    1975        LSR      #3,D7                      ;Shifting the irrelavant bits out the right side
00002236  4E75                    1976        RTS
00002238                          1977  
00002238                          1978  
00002238                          1979  
00002238                          1980      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDAL_CODE          D1C0
ADDASTRING          211F
ADDAW_CODE          D0C0
ADDBDN_CODE         D000
ADDBEA_CODE         D100
ADDLDN_CODE         D080
ADDLEA_CODE         D180
ADDSTRING           211B
ADDWDN_CODE         D040
ADDWEA_CODE         D140
ASLSTRING           2158
ASL_CODE            E100
ASRSTRING           215C
ASR_CODE            E000
BCLRI_CODE          880
BCLRSTRING          2168
BCLR_CODE           180
BCSSTRING           216D
BCS_CODE            6500
BGESTRING           2171
BGE_CODE            6C00
BITMASK0TO2         21DC
BITMASK12TO13       21F6
BITMASK12TO15       2193
BITMASK14TO15       21E6
BITMASK15TO12       F000
BITMASK15TO6        FFC0
BITMASK15TO7        FF80
BITMASK15TO8        FF00
BITMASK3TO5         21D0
BITMASK5TO5         222E
BITMASK6TO7         21C2
BITMASK6TO8         21B4
BITMASK7TO15        2214
BITMASK8TO15        2206
BITMASK9TO11        21A4
BITMASKMULDIVL      8BC0
BITMASKSHIFTS       F118
BITMASKSUBQ         2222
BLTSTRING           2175
BLT_CODE            6D00
BRASTRING           217D
BRA_CODE            6000
BVCSTRING           2179
BVC_CODE            6800
BYTE                2
CHECKSIZE           16E0
CMPB_CODE           B000
CMPISTRING          214B
CMPI_CODE           C00
CMPL_CODE           B080
CMPSTRING           2147
CMPW_CODE           B040
COMPARE_ADD         1118
COMPARE_BCC         129C
COMPARE_BCLR        1290
COMPARE_BCLRI       1284
COMPARE_CMP         1220
COMPARE_CMPI        123C
COMPARE_DIVSL       11FC
COMPARE_DIVSW       1214
COMPARE_EOR         10FC
COMPARE_JSR         12C8
COMPARE_LEA         12EC
COMPARE_MOVE        1184
COMPARE_MOVEA       1170
COMPARE_MOVEM       115C
COMPARE_MULSL       11F0
COMPARE_MULSW       1208
COMPARE_NEG         12E0
COMPARE_NOP         10B2
COMPARE_OR          10C8
COMPARE_ORI         10BE
COMPARE_RTS         12D4
COMPARE_SHIFT       1248
COMPARE_SUB         11A0
COMPARE_SUBQ        11D4
COMPMASK            17E6
CR                  D
CUR_ADDRESS         1000
DATASTRING          2106
DIVSL_CODE          840
DIVSSTRING          2142
DIVSW_CODE          81C0
EA_ADD              1BDC
EA_ADDA             19E8
EA_ADDITIONAL_DATA  1EC6
EA_ADD_DESTINATION  1C18
EA_ADD_SOURCE       1C04
EA_AND              1ABE
EA_ANDI             1B34
EA_AND_DESTINATION  1B08
EA_AND_SOURCE       1AEA
EA_AS_MEMORY        1E08
EA_AS_REGISTER      1DD0
EA_BLOCK_IMMEDIATE  20DE
EA_CMP              1CCA
EA_CMPI             1CEE
EA_DIVS             1D42
EA_EOR              19BA
EA_LS_MEMORY        1DA6
EA_LS_REGISTER      1D6E
EA_MOVE             1C74
EA_MOVE0            20AE
EA_MOVE1            20B4
EA_MOVE2            20BA
EA_MOVE3            20C0
EA_MOVE4            20C6
EA_MOVE5            20CC
EA_MOVE6            20D2
EA_MOVE7            20D8
EA_MOVEA            1CA6
EA_MULS             1D16
EA_NEG              1996
EA_OR               1A0C
EA_ORI              1A82
EA_OR_DESTINATION   1A56
EA_OR_SOURCE        1A38
EA_PARSE_ABSOLUTE_LONG_ADDRESS  1F46
EA_PARSE_ABSOLUTE_WORD_ADDRESS  1F58
EA_PARSE_AN         1EEC
EA_PARSE_DN         1EE0
EA_PARSE_IMMEDIATE_DATA  1F3C
EA_PARSE_INDIRECT_AN  1EF8
EA_PARSE_INDIRECT_DECREMENT_AN  1F24
EA_PARSE_INDIRECT_INCREMENT_AN  1F0C
EA_PARSE_MODE       1E94
EA_PARSE_REGISTER   206C
EA_RO_MEMORY        1E6A
EA_RO_REGISTER      1E32
EA_SUB              1B5E
EA_SUBQ             1C44
EA_SUB_DESTINATION  1BB0
EA_SUB_SOURCE       1B8C
ENDADD              1076
ENDBCC              1062
ENDBCLR             1092
ENDBCLRI            1046
ENDCMP              108E
ENDCMPI             105E
ENDDIVSL            103E
ENDDIVSW            108A
ENDEOR              106E
ENDJSR              104A
ENDLEA              1096
ENDMOVE             109E
ENDMOVEA            107A
ENDMOVEM            1052
ENDMULSL            103A
ENDMULSW            1086
ENDNEG              1066
ENDNOP              102E
ENDOP               10AC
ENDOR               1072
ENDORI              105A
ENDRTS              1032
ENDSHIFT            10A2
ENDSUB              107E
ENDSUBQ             1082
END_SEARCH          20FE
EORB_CODE           B100
EORL_CODE           B180
EORSTRING           2110
EORW_CODE           B140
ERROR               20FE
GETOP               1028
IO_GET_WORD         1F6A
IO_PRINT_OUTPUT     20E8
ISADD               1386
ISADDA              13AC
ISASL               159C
ISASR               1580
ISBCLR              15F0
ISBCS               160C
ISBGE               1624
ISBLT               163C
ISBRA               166C
ISBVC               1654
ISCMP               14E6
ISCMPI              1510
ISDATA              1836
ISDIVS              14C6
ISEOR               130C
ISJSR               1684
ISLEA               16CC
ISLSL               1564
ISLSR               153E
ISMOVE              1420
ISMOVEA             13EE
ISMOVEM             13DA
ISMULS              14A6
ISNEG               16B4
ISNOP               12F8
ISOR                1360
ISORI               1336
ISROL               15D4
ISROR               15B8
ISRTS               169C
ISSUB               144E
ISSUBQ              1478
JSRSTRING           2181
JSR_CODE            4E80
LEASTRING           218E
LEA_CODE            41C0
LF                  A
LOOP                1012
LSLSTRING           2150
LSL_CODE            E108
LSRSTRING           2154
LSR_CODE            E008
MASK15TO12          17F6
MASK15TO6           1806
MASK15TO7           17FE
MASK15TO8           17EE
MASKMULDIVL         180E
MASKSHIFT           1816
MOVEAL_CODE         2040
MOVEASTRING         212A
MOVEAW_CODE         3040
MOVEB_CODE          1000
MOVEL_CODE          2000
MOVEMM2R_CODE       4C80
MOVEMR2M_CODE       4880
MOVEMSTRING         2124
MOVESTRING          2130
MOVEW_CODE          3000
MULSL_CODE          800
MULSSTRING          213D
MULSW_CODE          C1C0
MYDATA              7FFF
N2ACHECK            18E0
N2ACHECKSTACK       2000
N2ASCII             1854
N2ASCII2            1858
N2ASCIISTACK        1F74
N2ASCIISTACK2       1F78
NEGSTRING           2189
NEG_CODE            4400
NEWLINE             2103
NOPSTRING           210C
NOP_CODE            4E71
OPMASK              F1C0
ORBDN_CODE          8000
ORBEA_CODE          8100
ORISTRING           2114
ORI_CODE            0
ORLDN_CODE          8080
ORLEA_CODE          8180
ORSTRING            2118
ORWDN_CODE          8040
ORWEA_CODE          8140
OUTADDRESS          181E
OUTPUT_START        A000
PRINT0              18EC
PRINT1              18F6
PRINT2              1900
PRINT3              190A
PRINT4              1914
PRINT5              191E
PRINT6              1928
PRINT7              1932
PRINT8              193C
PRINT9              1946
PRINTA              1950
PRINTB              195A
PRINTC              1964
PRINTCHAR           198C
PRINTD              196E
PRINTE              1978
PRINTF              1982
PUSH0               200C
PUSH1               2012
PUSH2               2018
PUSH3               201E
PUSH4               2024
PUSH5               202A
PUSH6               2030
PUSH7               2036
PUSH8               203C
PUSH9               2042
PUSHA               2048
PUSHB               204E
PUSHC               2054
PUSHD               205A
PUSHE               2060
PUSHF               2066
ROLSTRING           2160
ROL_CODE            E118
RORSTRING           2164
ROR_CODE            E018
RTSSTRING           2185
RTS_CODE            4E75
SIZE00              1750
SIZE000             1742
SIZE001             1788
SIZE01              175E
SIZE010             1796
SIZE011             17CE
SIZE10              176C
SIZE100             17A4
SIZE101             17B2
SIZE11              177A
SIZE110             17C0
SIZE111             17DA
SPACE               2102
START               1000
SUBBDN_CODE         9000
SUBBEA_CODE         9100
SUBLDN_CODE         9080
SUBLEA_CODE         9180
SUBQB_CODE          5100
SUBQL_CODE          5180
SUBQSTRING          2139
SUBQW_CODE          5140
SUBSTRING           2135
SUBWDN_CODE         9040
SUBWEA_CODE         9140
TEST_END            1010
